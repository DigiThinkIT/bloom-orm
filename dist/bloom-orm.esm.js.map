{"version":3,"file":"bloom-orm.esm.js","sources":["../src/queryUtils.js","../src/schema.js","../src/modelBase.js","../src/modelProxy.js","../src/models/array.js","../src/errors.js","../src/models/rest.js","../src/expressions.js","../src/astTransforms/index.js","../src/astTransforms/frappe.js","../src/models/frappeDoctype.js","../src/main.js"],"sourcesContent":["/**\r\n * This is the default implementation of a query ascending behaviour.\r\n * Usually, custom models may replace this function generate their internal\r\n * query language.\r\n * @example\r\n * // used on a fetch query on some model.\r\n * model.fetch({ orderby: r => asc(r.id) });\r\n * @param {string} col The column to order in ascending order\r\n * @returns {function} A comparison function to use between two objects\r\n */\r\nexport function asc(col) {\r\n    return function (a, b) {\r\n        return a[col] - b[col];\r\n    }\r\n}\r\n\r\n/**\r\n * This is the default implementation of a query descending behaviour.\r\n * Usually, custom models may replace this function generate their internal\r\n * query language.\r\n * @example\r\n * // used on a fetch query on some model.\r\n * model.fetch({ orderby: r => desc(r.id) });\r\n * @param {string} col The column to order in descending order\r\n * @returns {function} A comparison function to use between two objects\r\n */\r\nexport function desc(col) {\r\n    return function (a, b) {\r\n        return b[col] - a[col];\r\n    }\r\n}\r\n\r\n/**\r\n * Helper function. It accumulates an array of asc or desc calls to implement\r\n * multi column sorting for local stores. It is usually used internally and should\r\n * not be used outside of building custom models.\r\n * @example\r\n * // multi column sorting\r\n * [\r\n *  {a: 1, b:1}, \r\n *  {a:1, b: 2}, \r\n *  {a: 2, b:1}, \r\n *  {a: 2, b: 2}\r\n * ].sort(multiColSort([asc('a'), desc('b')]))\r\n * // result:\r\n * [\r\n *  {a: 1, b: 2},\r\n *  {a: 1, b: 1},\r\n *  {a: 2, b: 2},\r\n *  {a: 2, b: 1}\r\n * ]\r\n * @param {Array} orderby An array or single asc/desc function to accumulate\r\n * @returns {function} A comparison function which combines the provided array of sort functions.\r\n */\r\nexport function multiColSort(orderby) {\r\n    if (orderby.constructor !== Array) {\r\n        orderby = [orderby];\r\n    }\r\n\r\n    let fn = orderby.shift();\r\n    return function (a, b) {\r\n        let result = fn(a, b);\r\n        if (result === 0 && orderby.length > 0) {\r\n            return multiColSort(orderby)(a, b);\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n/**\r\n * \r\n * @param {*} fn A value to test if is considered an arrow function.\r\n * @returns {boolean} true or false\r\n */\r\nexport function isArrowFunction(fn) {\r\n    let fnSrc = fn.toString();\r\n    return (/^\\s*(\\(\\s*\\)|\\([a-z0-9_=,\\s+\\{\\}\\.]+\\)|[a-z0-9_\\.]+)\\s*=>.+/).test(fnSrc);\r\n}","// TODO: Implement model schema definitions to automate validation\r\nexport class Schema {\r\n    constructor(options) {\r\n        this.options = options;\r\n    }\r\n\r\n    validate(field, value) {\r\n        // TODO: validate agaisnt json schema\r\n    }\r\n}","import { EventEmitter } from 'events';\r\n\r\n/**\r\n * Base Model abstract class. All models should implement all methods on this class.\r\n * @extends EventEmitter\r\n */\r\nexport class ModelBase extends EventEmitter{\r\n    /**\r\n     * \r\n     * @param {*} options\r\n     */\r\n    constructor(options) {\r\n        super();\r\n        this.options = Object.assign({\r\n            primary_key: 'id'\r\n        }, options);\r\n    }\r\n\r\n    /**\r\n     * @returns {Promise} Resolves if connected else rejects.\r\n     */\r\n    async isConnected() {\r\n        return Promise.reject();\r\n    }\r\n\r\n    /**\r\n     * Connects the model to its backend.\r\n     * @param {*} data Any object to pass along when Promise chained.\r\n     * @returns {Promise} A promise resolved once the model's backend is connected.\r\n     */\r\n    async connect(data) {\r\n        return new Promise.resolve(data);\r\n    }\r\n\r\n    /**\r\n     * Disconnects the model from its backend\r\n     * @param {*} data Any object to pass along when Promise chained.\r\n     * @returns {Promise} A promise resolved once the model's backend is disconnected.\r\n     */\r\n    async disconnect(data) {\r\n        return new Promise.resolve(data);\r\n    }\r\n\r\n    /**\r\n     * Data fetch method. Accepts either a 'where' arrow function or more complex\r\n     * object containing where, orderby, start, limit options.\r\n     * @param {*} query \r\n     */\r\n    async fetch(query) {\r\n        return new Promise.resolve({ rows: [], total: 0 });\r\n    }\r\n\r\n    /**\r\n     * Updates an array of data\r\n     * @param {Array} rows\r\n     * @returns {Promise}\r\n     */\r\n    async update(rows) {\r\n        return new Promise.resolve({ rows: [] });\r\n    }\r\n\r\n    /**\r\n     * Creates a list of records.\r\n     * @param {Array} rows \r\n     * @returns {Promise} List of records created.\r\n     */\r\n    async create(rows) {\r\n        return new Promise.resolve({ rows: [] });\r\n    }\r\n\r\n    /**\r\n     * Delete records by ids\r\n     * @param {Array} ids The records ids to delete.\r\n     * @returns {Promise}\r\n     */\r\n    async delete(rows) {\r\n        return new Promise.resolve({ rows: [] });\r\n    }\r\n\r\n}","import { isArrowFunction } from './queryUtils';\r\nimport { ModelBase } from './modelBase';\r\n\r\n/**\r\n * A convenient event argument container that allows async processing for subscribing events.\r\n * @example\r\n * // simple event\r\n * let EventEmitter = require('event');\r\n * let emitter = new EventEmitter();\r\n * let e = new AsyncEvent('myevent', emitter, { a: 1});\r\n * emitter.on('myevent', e => {\r\n *   // emulate a long running promise,\r\n *   // any event that requies pausing further flow can insert a promise.\r\n *   e.await(new Promise(resolve => {\r\n *     setTimeout(resolve, 5000);\r\n *   }));\r\n * })\r\n * \r\n * // triggers events and waits until all event promises resolve\r\n * e.wait().then(() => {\r\n *  console.log(\"Called after all event promises are resolved\");\r\n * })\r\n */\r\nexport class AsyncEvent {\r\n\r\n    /**\r\n     * \r\n     * @param {string} eventName Event Name.\r\n     * @param {*} base EventHandler instance to trigger event in behalve of.\r\n     * @param {*} args Event arguments to pass during event trigger.\r\n     */\r\n    constructor(eventName, base, args={}) {\r\n        this._base = base;\r\n        this.args = args;\r\n        this._promises = [];\r\n        this._eventName = eventName;\r\n    }\r\n\r\n    /**\r\n     * If an event handler needs to run a long running process, this method\r\n     * allows them the insert a promise into a wait queue so implementing code\r\n     * can wait for these promises to resolve or be rejected.\r\n     * @param {Promise} promise A promise to add to our wait list\r\n     */\r\n    await(promise) {\r\n        this._promises.push(promise);\r\n    }\r\n\r\n    /**\r\n     * If event handlers added long running promisses through the await function this method can be used\r\n     * to chain more processes that should only run after these event promises have resolved.\r\n     * @param {*} data A convenient way to enable this method to be chained. \r\n     *                 Any data passed will be passed along untouched down at the end of the wait promise.\r\n     * @returns {Promise} A promise which will pass the provided data object if passed.\r\n     */\r\n    wait(data) {\r\n        this._base.emit(this._eventName, {\r\n            name: this._eventName,\r\n            target: this._base,\r\n            args: this.args,\r\n            await: this.await.bind(this)\r\n        });\r\n        return Promise.all(this._promises).then(() => data);\r\n    }\r\n}\r\n\r\n/**\r\n * A model facade class that encapsulates promise handling and connection management.\r\n * @extends ModelBase\r\n */\r\nexport class ModelProxy extends ModelBase {\r\n\r\n    /**\r\n     * \r\n     * @param {object} options Model configuration\r\n     * @param {(constructor|string)} options.adapter Adapter constructor to load or instantiate.\r\n     * @param {string} options.primary_key The field name of the model's primary key (default: 'id')\r\n     * @param {object} options.schema A json schema object defining the fields of the model. Not all models require it as usually this would al ready exists for selfcontained models.\r\n     * @param {boolean} options.autoDisconnect If true, an extra call to disconnect() will be added to the promise chain.\r\n     */\r\n    constructor(options) {\r\n        super(options);\r\n\r\n        if (typeof this.options.model == 'string') {\r\n            this._model = new require(this.options.model)(options);\r\n        } else {\r\n            this._model = new options.model(this.options);\r\n        }\r\n    }\r\n\r\n    get primaryKey() {\r\n        return this.options.primary_key;\r\n    }\r\n\r\n    recordDecorator(record) {\r\n        record.$id = record[this.options.primary_key];\r\n        return record;\r\n    }\r\n\r\n    async isConnected(data) {\r\n        return this._model.isConnected(data);\r\n    }\r\n\r\n    /**\r\n     * Connects the model to its backend.\r\n     * @param {*} data Any object to pass along when Promise chained.\r\n     * @fires beforeConnect Before connecting event.\r\n     * @fires afterConnect After connecting event.\r\n     * @returns {Promise} A promise resolved once the model's backend is connected.\r\n     */\r\n    async connect(data) {\r\n        /**\r\n         * Before connecting\r\n         * @event ModelProxy#beforeConnect\r\n         * @type {AsyncEvent}\r\n         */\r\n        let beforeConnectEvent = new AsyncEvent('beforeConnect', this, {});\r\n\r\n        /**\r\n         * After connecting\r\n         * @event ModelProxy#afterConnect\r\n         * @type {AsyncEvent}\r\n         */\r\n\r\n        return beforeConnectEvent.wait(data)\r\n            .then(data => this._model.connect(data))\r\n            .then(data => new AsyncEvent('afterConnect', this, {}).wait(data))\r\n    }\r\n\r\n    /**\r\n     * Disconnects the model from its backend\r\n     * @param {*} data Any object to pass along when Promise chained.\r\n     * @fires beforeDisconnect Before disconnecting event.\r\n     * @fires afterDisconnect After disconnecting event.\r\n     * @returns {Promise} A promise resolved once the model's backend is disconnected.\r\n     */\r\n    async disconnect(data) {\r\n        /**\r\n         * Before disconnecting\r\n         * @event ModelProxy#beforeDisconnect\r\n         * @type {AsyncEvent}\r\n         */\r\n        let beforeDisconnectEvent = new AsyncEvent('beforeDisconnect', this, {});\r\n\r\n        /**\r\n         * After disconnecting\r\n         * @event ModelProxy#aftereDisconnect\r\n         * @type {AsyncEvent}\r\n         */\r\n\r\n        return beforeDisconnectEvent.wait(data)\r\n            .then(data => this._model.disconnect(data))\r\n            .then(data => new AsyncEvent('afterDisconnect', this, {}).wait(data))\r\n    }\r\n\r\n    /**\r\n     * Data fetch method. Accepts either a 'where' arrow function or more complex\r\n     * object containing where, orderby, start, limit options.\r\n     * @param {(function|object)} query Query arrow function or object containing query definition.\r\n     * @param {function} query.where An arror function defining where operation(an arrow function is required)\r\n     * @param {function} query.orderby An arrow function defining sorting(an arrow function is required)\r\n     * @param {int} query.start Pagination start index\r\n     * @param {int} query.limit Pagination record length\r\n     * @fires beforeFetch Before disconnecting event.\r\n     * @fires afterFetch After disconnecting event.\r\n     * @returns {Promise.<object>} When fulfilled promise returns: { rows: <Array>, total: <int> }\r\n     */\r\n    async fetch(query={}) {\r\n\r\n        /** Accept an arrow function as 'where' condition */\r\n        if (isArrowFunction(query)) {\r\n            query = { where: query };\r\n        }\r\n\r\n        if ( !('limit' in query) ) {\r\n            query.limit = 20;\r\n        }\r\n\r\n        if (!('start' in query)) {\r\n            query.start = 0;\r\n        }\r\n\r\n        let chain = this._model.isConnected(query)\r\n            .catch(() => {\r\n                return this.connect(query)\r\n            })\r\n\r\n        /**\r\n         * Before fetch\r\n         * @event ModelProxy#beforeFetch\r\n         * @property {object} query Query object containing, where, orderby, start and limit properties.\r\n         * @property {function} query.where A where arrow function definition.\r\n         * @property {function} query.orderby A record order by definition arrow function.\r\n         * @property {int} query.start The record start index, used in pagination mostly.\r\n         * @property {int} query.limit The maximum number of records to return.\r\n         * @type {AsyncEvent}\r\n         */\r\n        let beforeFetchEvent = new AsyncEvent('beforeFetch', this, { query });\r\n\r\n        /**\r\n         * After fetch\r\n         * @event ModelProxy#afterFetch\r\n         * @property {object} result A query result object containing records fetched.\r\n         * @property {Array} result.rows Records fetched.\r\n         * @type {AsyncEvent}\r\n         */\r\n\r\n        chain = chain.then(query => beforeFetchEvent.wait(query))\r\n            .then(query => this._model.fetch(query))\r\n            .then(result => new AsyncEvent('afterFetch', this, { result }).wait(result));\r\n\r\n        if (this.options.autoDisconnect) {\r\n            chain = chain.then(result => this.disconnect(result));\r\n        }\r\n\r\n        return chain;\r\n    }\r\n\r\n    /**\r\n     * Updates an array of data\r\n     * @param {(object|Array)} data  object containing a 'rows' array key with records to update. You may also pass just an array of rows.\r\n     * @param {Array} data.rows  object containing a 'rows' array key with records to update. You may also pass just an array of rows.\r\n     * @fires beforeUpdate Before disconnecting event.\r\n     * @fires afterUpdate After disconnecting event.\r\n     * @returns {Promise.<object>} When fulfilled promise returns: { rows: <Array> }\r\n     */\r\n    async update(data) {\r\n\r\n        if (data.constructor == Array ) {\r\n            data = { rows: data };\r\n        }\r\n\r\n        let chain = this._model.isConnected(data)\r\n            .catch(() => {\r\n                return this.connect(data)\r\n            })\r\n\r\n\r\n        /**\r\n         * Before update\r\n         * @event ModelProxy#beforeUpdate\r\n         * @property { object } data \r\n         * @property { Array } data.rows Array of records to update.\r\n         * @type {AsyncEvent}\r\n         */\r\n        let beforeUpdateEvent = new AsyncEvent('beforeUpdate', this, data);\r\n\r\n        /**\r\n         * After update\r\n         * @event ModelProxy#afterUpdate\r\n         * @property { object } data \r\n         * @property { Array } data.rows Array of updated records.\r\n         * @type {AsyncEvent}\r\n         */\r\n\r\n        chain = chain.then(data => beforeUpdateEvent.wait(data))\r\n            .then(data => this._model.update(data))\r\n            .then(data => new AsyncEvent('afterUpdate', this, data).wait(data))\r\n\r\n        if (this.options.autoDisconnect) {\r\n            chain = chain.then(result => this.disconnect(result));\r\n        }\r\n\r\n        return chain;\r\n    }\r\n\r\n    /**\r\n     * Creates a list of records.\r\n     * @param {(object|Array)} data Either an Array of records or an object containing an Array key named 'rows'.\r\n     * @param {Array} data.rows Array containing records to create.\r\n     * @fires beforeCreate Before disconnecting event.\r\n     * @fires afterCreate After disconnecting event.\r\n     * @returns {Promise.<object>} List of records created. Object signature: { rows: <Array> }\r\n     */\r\n    async create(data) {\r\n\r\n        if ( data.constructor == Array ) {\r\n            data = { rows: data };\r\n        }\r\n\r\n        let chain = this._model.isConnected(data)\r\n            .catch(() => {\r\n                return this.connect(data)\r\n            })\r\n\r\n        /**\r\n         * Before create\r\n         * @event ModelProxy#beforeCreate\r\n         * @property {object} data Object with records to create.\r\n         * @property {Array} data.rows Records to create.\r\n         * @type {AsyncEvent}\r\n         */\r\n        let beforeCreateEvent = new AsyncEvent('beforeCreate', this, data);\r\n\r\n        /**\r\n         * After create\r\n         * @event ModelProxy#aftereCreate\r\n         * @property {Array} data Object containing new records.\r\n         * @property {Array} data.rows Array of records created.\r\n         * @type {AsyncEvent}\r\n         */\r\n\r\n        chain = chain.then(data => beforeCreateEvent.wait(data))\r\n            .then(data => this._model.create(data))\r\n            .then(data => new AsyncEvent('afterCreate', this, data).wait(data));\r\n\r\n        if (this.options.autoDisconnect) {\r\n            chain = chain.then(result => this.disconnect(result));\r\n        }\r\n\r\n        return chain;\r\n    }\r\n\r\n    /**\r\n     * Delete records by ids\r\n     * @param {Array} ids The records ids to delete.\r\n     * @fires beforeDelete Before disconnecting event.\r\n     * @fires afterDelete After disconnecting event.\r\n     * @returns {Promise.<Array>} When fulfilled promise returns an array of deleted ids.\r\n     */\r\n    async delete(ids) {\r\n        let chain = this._model.isConnected(ids)\r\n            .catch(() => {\r\n                return this.connect(ids)\r\n            })\r\n\r\n\r\n        /**\r\n         * Before delete\r\n         * @event ModelProxy#beforeDelete\r\n         * @property {object} data \r\n         * @property {Array} data.ids The record ids to delete.\r\n         * @type {AsyncEvent}\r\n         */\r\n        let beforeDeleteEvent = new AsyncEvent('beforeDelete', this, { ids });\r\n\r\n        /**\r\n         * After delete\r\n         * @event ModelProxy#aftereDelete\r\n         * @property {object} data\r\n         * @property {Array} data.ids The record ids deleted.\r\n         * @type {AsyncEvent}\r\n         */\r\n\r\n        chain = chain.then(ids => beforeDeleteEvent.wait(ids))\r\n            .then(ids => this._model.delete(ids))\r\n            .then(ids => new AsyncEvent('afterDelete', this, { ids }).wait(ids));\r\n\r\n        if (this.options.autoDisconnect) {\r\n            chain = chain.then(result => this.disconnect(result));\r\n        }\r\n\r\n        return chain;\r\n    }\r\n}","import { asc, desc, multiColSort } from '../queryUtils';\r\nimport { ModelBase } from '../modelBase';\r\n\r\n/**\r\n * Reference model implementation based on simple object arrays\r\n * @extends ModelBase\r\n */\r\nexport default class ArrayModel extends ModelBase {\r\n    constructor(options) {\r\n        super(options);\r\n        this._data = this.options.data;\r\n        this._connected = false;\r\n    }\r\n\r\n    /**\r\n     * @returns {Promise} Resolves if connected else rejects\r\n     * @override\r\n     */\r\n    async isConnected(data) {\r\n        if ( this._connected ) {\r\n            return Promise.resolve(data);\r\n        }\r\n        return Promise.reject(false);\r\n    }\r\n\r\n    /**\r\n     * To simulate and stay api compliant, this model implements connecting/disconnecting behaviour.\r\n     * @param {*} data \r\n     * @returns {Promise}\r\n     * @override\r\n     */\r\n    async connect(data) {\r\n        return new Promise(resolve => {\r\n            this._connected = true;\r\n            return resolve(data)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * To simulate and stay api compliant, this model implements connecting/disconnecting behaviour.\r\n     * @param {*} data \r\n     * @returns {Promise}\r\n     * @override\r\n     */\r\n    async disconnect(data) {\r\n        return new Promise(resolve => {\r\n            this._connected = false;\r\n            return resolve(data)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetches rows using where, order, start and limit query parameters\r\n     * @param {*} query An object containing a set of query definitions.\r\n     * @param {function} query.where An arror function defining where operation(an arrow function is required)\r\n     * @param {function} query.orderby An arrow function defining sorting(an arrow function is required)\r\n     * @param {int} query.start Pagination start index\r\n     * @param {int} query.limit Pagination record length\r\n     * @returns {Promise}\r\n     * @override\r\n     */\r\n    async fetch({ where, orderby, start, limit }) {\r\n        return new Promise(success => {\r\n            let result = {\r\n                rows: [],\r\n                total: 100\r\n            }\r\n\r\n            if (start === undefined) { start = 0 }\r\n            if (limit === undefined) { limit = 20 }\r\n\r\n            let count = 0;\r\n            for (let i = 0; i < this._data.length; i++) {\r\n                let row = Object.assign({\r\n                    $id: this._data[i][this.options.primary_key]\r\n                }, this._data[i]);\r\n\r\n                let matchCondition = where ? where(row) : true;\r\n                if (matchCondition) {\r\n                    result.rows.push(row);\r\n                }\r\n            }\r\n\r\n            let rowFields = Object.assign({\r\n                $id: this.options.primary_key\r\n            }, this.options.schema.properties);\r\n\r\n            if (orderby) {\r\n                result.rows = result.rows.sort(multiColSort(orderby(rowFields)));\r\n            }\r\n\r\n            result.rows = result.rows.slice(start, start + limit);\r\n\r\n            result.rows.forEach(r => {\r\n                delete r.$id;\r\n            });\r\n\r\n            return success(result);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Updates rows provided by passing an object containing a \"rows\" array property.\r\n     * @param {*} data Object containing rows in a \"rows\" property\r\n     * @returns {Promise} Returns the provided data with the rows updated.\r\n     * @override\r\n     */\r\n    async update(data) {\r\n        return new Promise(success => {\r\n            data.rows.forEach(row => {\r\n\r\n                this._data.find((r, i) => {\r\n                    if (r.id == row.id) {\r\n                        this._data[i] = row;\r\n                        return true;\r\n                    }\r\n                })\r\n\r\n            });\r\n            return success(data);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Deletes all records matching the provided ids.\r\n     * @param {Array} ids \r\n     * @returns {Promise}\r\n     * @override\r\n     */\r\n    async delete(ids) {\r\n        return new Promise(success => {\r\n            ids.forEach((id) => {\r\n                this._data.find((r, i) => {\r\n                    if (r.id == id) {\r\n                        this._data.splice(i, 1);\r\n                        return true;\r\n                    }\r\n                });\r\n            })\r\n\r\n            return success(ids);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates all the records provided. Returning the same records updated with their identifier.\r\n     * @param {Array} rows Array of records to create\r\n     * @returns {Promise}\r\n     * @override\r\n     */\r\n    async create(data) {\r\n        return new Promise(success => {\r\n            let lastId = this._data[this._data.length - 1].id;\r\n            data.rows.forEach((row, i) => {\r\n                row.id = ++lastId;\r\n                this._data.push(row);\r\n            });\r\n\r\n            success(data);\r\n        });\r\n    }\r\n\r\n}","/**\r\n * A Timeout Error\r\n */\r\nexport class TimeoutError extends Error {\r\n    constructor() {\r\n        super('A timeout has occured');\r\n        this.name = 'TimeoutError';\r\n    }\r\n}\r\n\r\nexport class RemoteError extends Error {\r\n    constructor(service, msg, stack) {\r\n        super(`A remote service error has occured (${service}) => ${msg}`);\r\n        this.name = \"RemoteError\";\r\n        this.service = service;\r\n        this.remoteStack = stack;\r\n    }\r\n}\r\n\r\nexport class UnexpectedResponseError extends Error {\r\n    constructor(service, sample, msg) {\r\n        super(`Remote service (${service}) responded with unexpected data => ${msg}`);\r\n        this.name = \"UnexpectedRemoteResponse\";\r\n        this.service = service;\r\n        this.sample = sample;\r\n    }\r\n}\r\n\r\nexport class MockRequestError extends Error {\r\n    constructor(response, request) {\r\n        super(`Mock Request Error: ${response.status}: ${response.statusText}`);\r\n        this.response = response;\r\n        this.request = request;\r\n    }\r\n}","import { asc, desc, multiColSort } from '../queryUtils';\r\nimport { ModelBase } from '../modelBase';\r\nimport { Schema } from '../schema';\r\nimport { RemoteError } from '../errors';\r\nconst axios = require('axios');\r\n\r\nlet RestOptionsSchema = new Schema({\r\n    id: '/RestModelOptions',\r\n    type: 'object',\r\n    'properties': {\r\n        'baseUrl': { 'type': 'string' },\r\n        'getEndPoint': { 'type': 'function' },\r\n        'connect': { 'type': 'function' },\r\n        'disconnect': { 'type': 'function' },\r\n        'serializer': { 'type': 'function' },\r\n        'deserializer': { 'type': 'function' }\r\n    }\r\n});\r\n\r\nexport function leftPadLines(lines, padding, skip=0) {\r\n    lines = JSON.stringify(lines, null, 4).trim().split(\"\\n\");\r\n\r\n    return lines.reduce((c, v, i) => {\r\n        if ( i <= skip ) {\r\n            return c + v;\r\n        } else {\r\n            return c + \"\\n\" + Array(padding).join(\" \") + v;\r\n        }\r\n    }, '')\r\n}\r\n\r\nexport function capitalize(value, skip) {\r\n    if ( value.constructor !== Array ) {\r\n        value = [value];\r\n    }\r\n\r\n    return value.reduce((c, v, i) => {\r\n        if ( i <= skip ) {\r\n            c.push(v);\r\n        } else {\r\n            c.push(v.charAt(0).toUpperCase() + v.slice(1));\r\n        }\r\n        return c;\r\n    }, []);\r\n}\r\n\r\nexport function normalizeField(value) {\r\n    return capitalize(value.split(' '), 1).join('');\r\n}\r\n\r\n/**\r\n * A generic and extensible Rest model.\r\n * @extends ModelBase\r\n */\r\nexport default class RestModel extends ModelBase {\r\n    constructor(options) {\r\n        super(options);\r\n\r\n        this._connected = false;\r\n        this.cookies = {};\r\n        this.fields = [];\r\n        this.meta = {\r\n            fields: {\r\n                $id: this.options.primary_key\r\n            }\r\n        }\r\n\r\n        this._http = this.options.http || axios.create({\r\n            validateStatus: function (status) {\r\n                return status >= 200 && status < 300; // default\r\n            }\r\n        });\r\n\r\n        if (this.options.schema) {\r\n            this.fields = Object.keys(this.options.schema.properties);\r\n\r\n            for(let i in this.fields) {\r\n                let field = this.fields[i];\r\n                let normalizedField = normalizeField(field);\r\n                this.meta.fields[normalizedField] = field;\r\n            }\r\n        }\r\n    }\r\n\r\n    getEndPoint(action, options, id, args, data) {\r\n        let argStr = '';\r\n        if ( action == 'fetch' ) {\r\n            let tmpArgs = [];\r\n            for(var k in args) {\r\n                if (args[k] !== undefined) {\r\n                    tmpArgs.push(`${k}=${encodeURIComponent(args[k])}`);\r\n                }\r\n            }\r\n            argStr = tmpArgs.join('&');\r\n        }\r\n        let ACTIONS = {\r\n            connect: {\r\n                url: `${options.baseUrl}/login`,\r\n                method: 'get'\r\n            },\r\n            disconnect: {\r\n                url: `${options.baseUrl}/logout`,\r\n                method: 'get'      \r\n            },\r\n            fetch: {\r\n                url: `${options.baseUrl}/resource/${this.options.resource}${id ? '/' + id : ''}${argStr ? '?' + argStr : ''}`,\r\n                method: 'get'\r\n            },\r\n            create: {\r\n                url: `${options.baseUrl}/resource/${this.options.resource}`,\r\n                method: 'post',\r\n                data\r\n            },\r\n            update: {\r\n                url: `${options.baseUrl}/resource/${this.options.resource}`,\r\n                method: 'put',\r\n                data\r\n            },\r\n            delete: {\r\n                url: `${options.baseUrl}/resource/${this.options.resource}/${id}`,\r\n                method: 'delete'\r\n            },\r\n            default: {\r\n                url: `${options.baseUrl}`,\r\n                method: 'get'\r\n            }\r\n        }\r\n\r\n        let finalAction = null;\r\n        if ( typeof this.options.getEndPoint == 'function' ) {\r\n            finalAction = this.options.getEndPoint(action, options, id);\r\n        } else {\r\n            finalAction = action in ACTIONS ? ACTIONS[action] : ACTIONS.default;\r\n        }\r\n\r\n        if ( this.options.debug ) {\r\n            console.log(\"endPoint: \", finalAction);\r\n        }\r\n\r\n        return finalAction;\r\n    }\r\n\r\n    HTTP(endPoint) {\r\n\r\n        let opts = Object.assign({\r\n            method: 'GET',\r\n            withCredentials: true        \r\n        }, endPoint);\r\n\r\n        if (this.options.debug) {\r\n            console.log('\\nHTTP CALL : ', leftPadLines(endPoint, 14));\r\n            console.log('   - OPTS : ', leftPadLines(opts, 14));\r\n        }\r\n\r\n        return this._http.request(opts);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @returns {Promise} true when connected\r\n     * @override\r\n     */\r\n    async isConnected(data) {\r\n        let isConnectedPromise = null;\r\n        if (typeof this.options.isConnected == 'function') {\r\n            isConnectedPromise = this.options.isConnected();\r\n        } else if ( this._connected ) {\r\n            this.isConnectedPromise = Promise.resolve(data);\r\n        } else {\r\n            this.isConnectedPromise = Promise.reject();\r\n        }\r\n\r\n        return isConnectedPromise.then((data) => {\r\n            this._connected = true;\r\n            return data;\r\n        })\r\n        .catch(() => {\r\n            this._connected = false;\r\n        })\r\n    }\r\n\r\n    /**\r\n     * To simulate and stay api compliant, this model implements connecting/disconnecting behaviour.\r\n     * @param {*} data \r\n     * @returns {Promise}\r\n     * @override\r\n     */\r\n    async connect(data) {\r\n        let connectPromise = null;\r\n        let endPoint = this.getEndPoint('connect', this.options);\r\n\r\n        // allow overwriting connect promise with user version if required.\r\n        if ( this.options.connect ) {\r\n            connectPromise = this.options.connect(endPoint, this.options, this.HTTP.bind(this))\r\n        } else {\r\n            connectPromise = this.HTTP(endPoint);\r\n        }\r\n\r\n        // either way, the promise must return a response that at least contains\r\n        // the status key with the resulting http response code.\r\n        return connectPromise.then(response => {\r\n            this._connected = true;\r\n            return response.data;\r\n        }).catch(err => {\r\n            let response = err.response;\r\n            this._connected = false;\r\n            return Promise.reject(new RemoteError(\"REST\", `${response.status}: ${response.statusText}`, response.data));\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * To simulate and stay api compliant, this model implements connecting/disconnecting behaviour.\r\n     * @param {*} data \r\n     * @returns {Promise}\r\n     * @override\r\n     */\r\n    async disconnect(data) {\r\n        let disconnectPromise = null;\r\n        let endPoint = this.getEndPoint('disconnect', this.options);\r\n        if (this.options.disconnect) {\r\n            disconnectPromise = this.options.disconnect(endPoint, this.options, this.HTTP.bind(this))\r\n        } else {\r\n            disconnectPromise = this.HTTP(endPoint);\r\n        }\r\n\r\n        return disconnectPromise.then(response => {\r\n            if ( response.status == 200) {\r\n                this._connected = false;\r\n                return data;\r\n            } else {\r\n                this._connected = false;\r\n                throw new Error(\"Error while disconnecting\")\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetches rows using where, order, start and limit query parameters\r\n     * @param {*} query An object containing a set of query definitions.\r\n     * @returns {Promise}\r\n     * @override\r\n     */\r\n    async fetch({ where, orderby, start, limit }) {\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let whereAst, orderbyAst;\r\n\r\n            if ( where ) {\r\n                whereAst = jsep(where.toString());\r\n            }\r\n\r\n            if ( orderby ) {\r\n                orderbyAst = jsep(orderby.toString());\r\n            }\r\n\r\n            let result = {\r\n                rows: [],\r\n                total: 100\r\n            }\r\n\r\n            if (start === undefined) { start = 0 }\r\n            if (limit === undefined) { limit = 20 }\r\n\r\n            \r\n            let endPoint = this.getEndPoint('fetch', this.options);\r\n            return this.HTTP(endPoint);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Updates rows provided by passing an object containing a \"rows\" array property.\r\n     * @param {*} data Object containing rows in a \"rows\" property\r\n     * @returns {Promise} Returns the provided data with the rows updated.\r\n     * @override\r\n     */\r\n    async update(data) {\r\n        let promises = [];\r\n        data.rows.forEach(row => {\r\n            let endPoint = this.getEndPoint('update', this.options, row.id, null, row);\r\n            promises.push(this.HTTP(endPoint).then(result => { \r\n                return result.data.data \r\n            }));\r\n        });\r\n\r\n        return Promise.all(promises).then(results => {\r\n            return {\r\n                rows: results\r\n            };\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Deletes all records matching the provided ids.\r\n     * @param {Array} ids \r\n     * @returns {Promise}\r\n     * @override\r\n     */\r\n    async delete(ids) {\r\n        let promises = [];\r\n        ids.forEach(id => {\r\n            let endPoint = this.getEndPoint('delete', this.options, id);\r\n            promises.push((function (endPoint, id) { \r\n                return this.HTTP(endPoint).then(result => {\r\n                    return id;\r\n                }).catch(err => {\r\n                    return {\r\n                        id,\r\n                        errorMessage: \"Error deleting record\",\r\n                        debug: err\r\n                    }\r\n                });\r\n            }.bind(this))(endPoint, id));\r\n        });\r\n\r\n        return Promise.all(promises).then(results => {\r\n            return {\r\n                rows: results\r\n            };\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates all the records provided. Returning the same records updated with their identifier.\r\n     * @param {Array} rows Array of records to create\r\n     * @returns {Promise}\r\n     * @override\r\n     */\r\n    async create(data) {\r\n        let promises = [];\r\n        data.rows.forEach(row => {\r\n            let endPoint = this.getEndPoint('create', this.options, null, null, row);\r\n            promises.push(this.HTTP(endPoint).then(result => {\r\n                return result.data.data\r\n            }));\r\n        });\r\n\r\n        return Promise.all(promises).then(results => {\r\n            return {\r\n                rows: results\r\n            };\r\n        });\r\n    }\r\n\r\n}","const jsep = require('jsep');\r\njsep.addBinaryOp(\"^\");\r\njsep.addUnaryOp('@');\r\njsep.removeBinaryOp(\">>>\");\r\njsep.removeBinaryOp(\"<<<\");\r\njsep.removeUnaryOp(\"~\");\r\n\r\nexport class ExpressionBuilder {\r\n    constructor(options) {\r\n        this.options = options;\r\n        this.ast = null;\r\n    }\r\n\r\n    parse(expOrArrowFn) {\r\n        let src = expOrArrowFn.toString();\r\n        let rx = /([^=>]+)\\s*=>\\s*(.+)/gi\r\n        let result = rx.exec(src);\r\n        this.ast = jsep(result[2]);\r\n        return this;\r\n    }\r\n\r\n    transform(transform) {\r\n        if ( !transform  ) {\r\n            transform = this.options.transform;\r\n        }\r\n\r\n        return transform.run(this.ast);\r\n    }\r\n\r\n}","\r\nexport class AstTransform {\r\n    constructor(state, opts) {\r\n        this.state = state;\r\n        this.options = Object.assign({\r\n            debug: false,\r\n            allowBinaryExpressions: true,\r\n            allowLogicalExpressions: true,\r\n            allowMemberExpressions: true,\r\n            allowCallExpressions: true,\r\n            allowLiterals: true,\r\n            allowIdentifier: true,\r\n            allowArrayExpression: false\r\n        }, opts);\r\n    }\r\n\r\n    run(ast) {\r\n        if ( this.options.debug ) {\r\n            console.log(JSON.stringify(ast, null, '  '));\r\n        }\r\n\r\n        let expFn = this.buildAstFnTree(ast);\r\n        return expFn();\r\n    }\r\n\r\n    buildAstFnTree(ast) {       \r\n        let expFn = null;\r\n        if (ast.type == 'BinaryExpression' && this.options.allowBinaryExpressions ) {\r\n            expFn = this.onBinaryExpression.bind(this, \r\n                ast.operator,\r\n                this.buildAstFnTree(ast.left),\r\n                this.buildAstFnTree(ast.right)\r\n            );\r\n        } else if (ast.type == 'LogicalExpression' && this.options.allowLogicalExpressions ) {\r\n            expFn = this.onLogicalExpression.bind(this,\r\n                ast.operator,\r\n                this.buildAstFnTree(ast.left),\r\n                this.buildAstFnTree(ast.right)\r\n            );\r\n        } else if (ast.type == 'MemberExpression' && this.options.allowMemberExpressions ) {\r\n            expFn = this.onMemberExpression.bind(this,\r\n                ast.computed,\r\n                this.buildAstFnTree(ast.object),\r\n                this.buildAstFnTree(ast.property)\r\n            );\r\n        } else if (ast.type == 'Identifier' && this.options.allowIdentifier ) {\r\n            expFn = this.onIdentifier.bind(this,\r\n                ast.name\r\n            );\r\n        } else if (ast.type == 'Literal' && this.options.allowLiterals ) {\r\n            expFn = this.onLiteral.bind(this,\r\n                ast.value,\r\n                ast.raw\r\n            );\r\n        } else if (ast.type == 'CallExpression' && this.options.allowCallExpressions ) {\r\n            let args = ast.arguments.reduce((c, v) => {\r\n                c.push(this.buildAstFnTree(v));\r\n                return c;\r\n            }, []);\r\n\r\n            expFn = this.onCallExpression.bind(this,\r\n                this.buildAstFnTree(ast.callee),\r\n                args\r\n            );\r\n        } else if (ast.type == \"ArrayExpression\" && this.options.allowArrayExpression) {\r\n            let elements = ast.elements.reduce((c, v) => {\r\n                c.push(this.buildAstFnTree(v));\r\n                return c;\r\n            }, []);\r\n            expFn = this.onArrayExpression.bind(this, elements);\r\n        } else {\r\n            throw new Error(`Unhandled ast type: ${ast.type}`);\r\n        }\r\n\r\n        return expFn;\r\n    }\r\n\r\n    onArrayExpression(elements) {\r\n        var elResolved = elements.reduce((c, v) => {\r\n            let value = v();\r\n            if (typeof value == 'string') {\r\n                value = JSON.stringify(value);\r\n            }\r\n            c.push(value);\r\n            return c;\r\n        }, []);\r\n\r\n        return elResolved.join(', ');\r\n    }\r\n\r\n    onLogicalExpression(op, left, right) {\r\n\r\n        return `${left()} ${op} ${right()}`;\r\n    }\r\n\r\n    onBinaryExpression(op, left, right) {\r\n        let rightValue = right();\r\n        if ( typeof rightValue == 'string' ) {\r\n            rightValue = JSON.stringify(rightValue);\r\n        }\r\n        return `${left()} ${op} ${rightValue}`;\r\n    }\r\n\r\n    onCallExpression(callee, args) {\r\n        var argsResolved = args.reduce((c, v) => {\r\n            let value = v();\r\n            if ( typeof value == 'string' ) {\r\n                value = JSON.stringify(value);\r\n            }\r\n            c.push(value);\r\n            return c;\r\n        }, []);\r\n        return `${callee()}(${argsResolved.join(', ')})`;\r\n    }\r\n\r\n    onMemberExpression(computed, obj, property) {\r\n        if (computed) {\r\n            let objInst = obj();\r\n            let comp = property();\r\n            let objValue = objInst[comp];\r\n            return objValue;\r\n        } else {\r\n            let objKey = obj();\r\n            let objInst = this.state[objKey];\r\n            let objValue = objInst[property()];\r\n            return objValue;\r\n        }\r\n    }\r\n\r\n    onIdentifier(name) {\r\n        return name;\r\n    }\r\n\r\n    onLiteral(value, raw) {\r\n        return value;\r\n    }\r\n}","import { AstTransform } from '../astTransforms';\r\n\r\nexport default class FrappeRestQueryAstTransform extends AstTransform {\r\n\r\n    run(ast) {\r\n        let result = super.run(ast);\r\n\r\n        if ( typeof this.options.finalize == 'function' ) {\r\n            return this.options.finalize(result);\r\n        } else {\r\n            if ( result.charAt(1) != '[' ) {\r\n                result = `[${result}]`;\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n\r\n    onArrayExpression(elements) {\r\n        var elResolved = elements.reduce((c, v) => {\r\n            let value = v();\r\n            c.push(value);\r\n            return c;\r\n        }, []);\r\n\r\n        return elResolved.join(', ');\r\n    }\r\n\r\n    onLogicalExpression(op, left, right) {\r\n        if ( op != '&&' ) {\r\n            new new Error(`Unsupported operator: ${op}`)\r\n        }\r\n        return `[${left()}, ${right()}]`;\r\n    }\r\n\r\n    onBinaryExpression(op, left, right) {\r\n        return `[\"${left()}\", \"${op}\", ${right()}]`;\r\n    }\r\n\r\n    onCallExpression(callee, args) {\r\n        let calleeName = callee().toLowerCase();\r\n        if ( calleeName == 'like' ) {\r\n            let field = args[0]();\r\n            let match = args[1]();\r\n            if ( typeof match == 'string' ) {\r\n                match = JSON.stringify(match);\r\n            }\r\n            return `[\"${field}\", \"LIKE\", ${match}]`;\r\n        } else if ( calleeName == 'asc' ) {\r\n            let field = args[0]();\r\n            return `${field} ASC`;\r\n        } else if (calleeName == 'desc') {\r\n            let field = args[0]();\r\n            return `${field} DESC`;\r\n        }\r\n    }\r\n\r\n    onMemberExpression(computed, obj, property) {\r\n        if (computed) {\r\n            let objInst = obj();\r\n            let comp = property();\r\n            let objValue = objInst[comp];\r\n            return objValue;\r\n        } else {\r\n            let objKey = obj();\r\n            let objInst = this.state[objKey];\r\n            let objValue = objInst[property()];\r\n            return objValue;\r\n        }\r\n    }\r\n\r\n}","import RestModel from './rest';\r\nimport { ExpressionBuilder } from '../expressions';\r\nimport FrappeRestQueryAstTransform from '../astTransforms/frappe';\r\nimport { RemoteError, UnexpectedResponseError } from '../errors';\r\n\r\n/**\r\n * A generic model which wraps Frappe's REST api for their Doctypes.\r\n */\r\nexport default class FrappeDoctypeModel extends RestModel {\r\n\r\n    constructor(options) {\r\n        super(Object.assign({\r\n        }, options));\r\n    }\r\n\r\n    getEndPoint(action, options, id, args, data) {\r\n        let argStr = '';\r\n        if (action == 'fetch') {\r\n            let tmpArgs = [];\r\n            for (var k in args) {\r\n                if ( args[k] !== undefined ) {\r\n                    tmpArgs.push(`${k}=${encodeURIComponent(args[k])}`);\r\n                }\r\n            }\r\n            argStr = tmpArgs.join('&');\r\n        }\r\n\r\n        let ACTIONS = {\r\n            connect: {\r\n                url: `${options.baseUrl}/api/method/login?usr=${encodeURIComponent(options.auth.usr)}&pwd=${encodeURIComponent(options.auth.pwd)}`,\r\n                method: 'get'\r\n            },\r\n            disconnect: {\r\n                url: `${options.baseUrl}/api/method/logout`,\r\n                method: 'get'\r\n            },\r\n            fetch: {\r\n                url: `${options.baseUrl}/api/resource/${encodeURIComponent(options.resource)}${id ? '/' + id : ''}${argStr ? '?' + argStr : ''}`,\r\n                method: 'get'\r\n            },\r\n            create: {\r\n                url: `${options.baseUrl}/api/resource/${encodeURIComponent(options.resource)}`,\r\n                method: 'post',\r\n                data\r\n            },\r\n            update: {\r\n                url: `${options.baseUrl}/api/resource/${encodeURIComponent(options.resource)}/${id}`,\r\n                method: 'put',\r\n                data\r\n            },\r\n            delete: {\r\n                url: `${options.baseUrl}/api/resource/${encodeURIComponent(options.resource)}/${id}`,\r\n                method: 'delete',\r\n            },\r\n            method: {\r\n                url: `${options.baseUrl}/api/method/${id}`,\r\n                method: 'get'\r\n            },\r\n            default: {\r\n                url: `${options.baseUrl}`,\r\n                method: 'get'\r\n            }\r\n\r\n        }\r\n\r\n        return action in ACTIONS ? ACTIONS[action] : ACTIONS.default;\r\n    }\r\n\r\n    handleFrappeErrors(response, label) {\r\n        let rx = /(?:\\<pre\\>)([^<]+)(?:\\<\\/pre\\>)/ig;\r\n        let matches = rx.exec(response.data);\r\n        let remoteTrace = matches[1].trim().split(\"\\n\");\r\n        let msg = remoteTrace[remoteTrace.length - 1];\r\n        throw new RemoteError((this.options.name || 'Frappe') + (label?`[${label}]`:''), msg, remoteTrace);\r\n    }\r\n\r\n    async isConnected(data) {\r\n        let endPoint = this.getEndPoint('method', this.options, 'frappe.auth.get_logged_user');\r\n        return this.HTTP(endPoint).then(response => {\r\n                if (response.status == 200) {\r\n                    return data;\r\n                } else {\r\n                    throw new Error(response.status);\r\n                }\r\n            });\r\n    }\r\n\r\n    async fetch({where, orderby, start, limit}) {\r\n\r\n        let filters,\r\n            order_by,\r\n            fields=JSON.stringify(this.fields),\r\n            builder = new ExpressionBuilder({\r\n                transform: new FrappeRestQueryAstTransform({\r\n                    r: this.meta.fields\r\n                })\r\n            }),\r\n            orderBuilder = new ExpressionBuilder({\r\n                transform: new FrappeRestQueryAstTransform({\r\n                    r: this.meta.fields\r\n                }, {\r\n                    allowArrayExpression: true,\r\n                    allowLogicalOperators: false,\r\n                    allowBinaryOperators: false,\r\n                    finalize(output) {\r\n                        return JSON.stringify(output);\r\n                    }\r\n                })\r\n            });\r\n\r\n        if ( where ) {\r\n            filters = builder.parse(where).transform();\r\n        }\r\n\r\n        if ( orderby ) {\r\n            order_by = orderBuilder.parse(orderby).transform();\r\n        }\r\n\r\n        let fetchArgs = {\r\n            fields,\r\n            filters,\r\n            order_by,\r\n            limit_start: start,\r\n            limit_page_length: limit\r\n        };\r\n        let fetchEndPoint = this.getEndPoint('fetch', this.options, null, fetchArgs);\r\n\r\n        let totalArgs = {\r\n            fields: JSON.stringify([\"count(*) as total\"]),\r\n            filters,\r\n            order_by\r\n        };\r\n        let totalEndPoint = this.getEndPoint('fetch', this.options, null, totalArgs);\r\n        return Promise.all([\r\n            this.HTTP(fetchEndPoint),\r\n            this.HTTP(totalEndPoint)])\r\n            .then(responses => {\r\n                let fetchResponse = responses[0],\r\n                    totalResponse = responses[1],\r\n                    result = {\r\n                        rows: null,\r\n                        total: 0\r\n                    };\r\n\r\n                // fetch results\r\n                if (fetchResponse.status == 200) {\r\n                    if (typeof fetchResponse.data != 'object') {\r\n                        // something went wrong, needle could not parse returned json\r\n                        throw new UnexpectedResponseError(this.name || \"Frappe\", fetchResponse.body, \"Could not parse response from service\");\r\n                    }\r\n\r\n                    result.rows = fetchResponse.data.data;\r\n                } else {\r\n                    this.handleFrappeErrors(fetchResponse, \"Error while parsing fetch row results.\");\r\n                }\r\n\r\n                // fetch query count\r\n                if (totalResponse.status == 200) {\r\n                    if (typeof totalResponse.data != 'object') {\r\n                        // something went wrong, needle could not parse returned json\r\n                        throw new UnexpectedResponseError(this.name || \"Frappe\", totalResponse.body, \"Could not parse response from service\");\r\n                    }\r\n\r\n                    result.total = totalResponse.data.data[0].total\r\n                } else {\r\n                    this.handleFrappeErrors(totalResponse, \"Error while parsing fetch total results.\");\r\n                }\r\n\r\n                return result;\r\n            });\r\n    }\r\n\r\n}","import * as queryUtils from './queryUtils';\r\nimport { Schema } from './schema';\r\nimport { ModelBase } from './modelBase';\r\nimport { ModelProxy } from './modelProxy';\r\nimport ArrayModel from './models/array';\r\nimport RestModel from './models/rest';\r\nimport FrappeDoctypeModel from './models/frappeDoctype';\r\nimport * as astTransforms from './astTransforms';\r\nimport FrappeRestQueryAstTransform from './astTransforms/frappe';\r\nimport * as errors from './errors';\r\n\r\nexport function createModel(options) {\r\n    return new ModelProxy(options);\r\n}\r\n\r\nconst transforms = {\r\n    astTransforms,\r\n    FrappeRestQueryAstTransform\r\n}\r\n\r\nexport { \r\n    ModelProxy, \r\n    queryUtils, \r\n    Schema, \r\n    ModelBase, \r\n    ArrayModel, \r\n    RestModel, \r\n    FrappeDoctypeModel,\r\n    transforms,\r\n    errors\r\n};"],"names":["jsep"],"mappings":"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"}
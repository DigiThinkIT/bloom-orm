{"version":3,"file":"bloom-orm.umd.js","sources":["../src/queryUtils.js","../src/schema.js","../src/modelBase.js","../src/modelProxy.js","../src/models/array.js","../src/errors.js","../src/utils.js","../src/models/rest.js","../src/expressions.js","../src/astTransforms/index.js","../src/astTransforms/frappe.js","../src/models/frappeDoctype.js","../src/astTransforms/mysql.js","../src/main.js"],"sourcesContent":["/**\r\n * This is the default implementation of a query ascending behaviour.\r\n * Usually, custom models may replace this function generate their internal\r\n * query language.\r\n * @example\r\n * // used on a fetch query on some model.\r\n * model.fetch({ orderby: r => asc(r.id) });\r\n * @param {string} col The column to order in ascending order\r\n * @returns {function} A comparison function to use between two objects\r\n */\r\nexport function asc(col) {\r\n    return function (a, b) {\r\n        return a[col] - b[col];\r\n    }\r\n}\r\n\r\n/**\r\n * This is the default implementation of a query descending behaviour.\r\n * Usually, custom models may replace this function generate their internal\r\n * query language.\r\n * @example\r\n * // used on a fetch query on some model.\r\n * model.fetch({ orderby: r => desc(r.id) });\r\n * @param {string} col The column to order in descending order\r\n * @returns {function} A comparison function to use between two objects\r\n */\r\nexport function desc(col) {\r\n    return function (a, b) {\r\n        return b[col] - a[col];\r\n    }\r\n}\r\n\r\n/**\r\n * Helper function. It accumulates an array of asc or desc calls to implement\r\n * multi column sorting for local stores. It is usually used internally and should\r\n * not be used outside of building custom models.\r\n * @example\r\n * // multi column sorting\r\n * [\r\n *  {a: 1, b:1}, \r\n *  {a:1, b: 2}, \r\n *  {a: 2, b:1}, \r\n *  {a: 2, b: 2}\r\n * ].sort(multiColSort([asc('a'), desc('b')]))\r\n * // result:\r\n * [\r\n *  {a: 1, b: 2},\r\n *  {a: 1, b: 1},\r\n *  {a: 2, b: 2},\r\n *  {a: 2, b: 1}\r\n * ]\r\n * @param {Array} orderby An array or single asc/desc function to accumulate\r\n * @returns {function} A comparison function which combines the provided array of sort functions.\r\n */\r\nexport function multiColSort(orderby) {\r\n    if (orderby.constructor !== Array) {\r\n        orderby = [orderby];\r\n    }\r\n\r\n    let fn = orderby.shift();\r\n    return function (a, b) {\r\n        let result = fn(a, b);\r\n        if (result === 0 && orderby.length > 0) {\r\n            return multiColSort(orderby)(a, b);\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n/**\r\n * \r\n * @param {*} fn A value to test if is considered an arrow function.\r\n * @returns {boolean} true or false\r\n */\r\nexport function isArrowFunction(fn) {\r\n    let fnSrc = fn.toString();\r\n    return (/^\\s*(\\(\\s*\\)|\\([a-z0-9_=,\\s+\\{\\}\\.]+\\)|[a-z0-9_\\.]+)\\s*=>.+/).test(fnSrc);\r\n}","// TODO: Implement model schema definitions to automate validation\r\nexport class Schema {\r\n    constructor(options) {\r\n        this.options = options;\r\n    }\r\n\r\n    validate(field, value) {\r\n        // TODO: validate agaisnt json schema\r\n    }\r\n}","import { EventEmitter } from 'events';\r\n\r\n/**\r\n * Base Model abstract class. All models should implement all methods on this class.\r\n * @extends EventEmitter\r\n */\r\nexport class ModelBase extends EventEmitter{\r\n    /**\r\n     * \r\n     * @param {*} options\r\n     */\r\n    constructor(options) {\r\n        super();\r\n        this.options = Object.assign({\r\n            primary_key: 'id'\r\n        }, options);\r\n    }\r\n\r\n    /**\r\n     * @returns {Promise} Resolves if connected else rejects.\r\n     */\r\n    async isConnected() {\r\n        return Promise.reject();\r\n    }\r\n\r\n    /**\r\n     * Connects the model to its backend.\r\n     * @param {*} data Any object to pass along when Promise chained.\r\n     * @returns {Promise} A promise resolved once the model's backend is connected.\r\n     */\r\n    async connect(data) {\r\n        return new Promise.resolve(data);\r\n    }\r\n\r\n    /**\r\n     * Disconnects the model from its backend\r\n     * @param {*} data Any object to pass along when Promise chained.\r\n     * @returns {Promise} A promise resolved once the model's backend is disconnected.\r\n     */\r\n    async disconnect(data) {\r\n        return new Promise.resolve(data);\r\n    }\r\n\r\n    /**\r\n     * Data fetch method. Accepts either a 'where' arrow function or more complex\r\n     * object containing where, orderby, start, limit options.\r\n     * @param {*} query \r\n     */\r\n    async fetch(query) {\r\n        return new Promise.resolve({ rows: [], total: 0 });\r\n    }\r\n\r\n    /**\r\n     * Updates an array of data\r\n     * @param {Array} rows\r\n     * @returns {Promise}\r\n     */\r\n    async update(rows) {\r\n        return new Promise.resolve({ rows: [] });\r\n    }\r\n\r\n    /**\r\n     * Creates a list of records.\r\n     * @param {Array} rows \r\n     * @returns {Promise} List of records created.\r\n     */\r\n    async create(rows) {\r\n        return new Promise.resolve({ rows: [] });\r\n    }\r\n\r\n    /**\r\n     * Delete records by ids\r\n     * @param {Array} ids The records ids to delete.\r\n     * @returns {Promise}\r\n     */\r\n    async delete(rows) {\r\n        return new Promise.resolve({ rows: [] });\r\n    }\r\n\r\n}","import { isArrowFunction } from './queryUtils';\r\nimport { ModelBase } from './modelBase';\r\n\r\n/**\r\n * A convenient event argument container that allows async processing for subscribing events.\r\n * @example\r\n * // simple event\r\n * let EventEmitter = require('event');\r\n * let emitter = new EventEmitter();\r\n * let e = new AsyncEvent('myevent', emitter, { a: 1});\r\n * emitter.on('myevent', e => {\r\n *   // emulate a long running promise,\r\n *   // any event that requies pausing further flow can insert a promise.\r\n *   e.await(new Promise(resolve => {\r\n *     setTimeout(resolve, 5000);\r\n *   }));\r\n * })\r\n * \r\n * // triggers events and waits until all event promises resolve\r\n * e.wait().then(() => {\r\n *  console.log(\"Called after all event promises are resolved\");\r\n * })\r\n */\r\nexport class AsyncEvent {\r\n\r\n    /**\r\n     * \r\n     * @param {string} eventName Event Name.\r\n     * @param {*} base EventHandler instance to trigger event in behalve of.\r\n     * @param {*} args Event arguments to pass during event trigger.\r\n     */\r\n    constructor(eventName, base, args={}) {\r\n        this._base = base;\r\n        this.args = args;\r\n        this._promises = [];\r\n        this._eventName = eventName;\r\n    }\r\n\r\n    /**\r\n     * If an event handler needs to run a long running process, this method\r\n     * allows them the insert a promise into a wait queue so implementing code\r\n     * can wait for these promises to resolve or be rejected.\r\n     * @param {Promise} promise A promise to add to our wait list\r\n     */\r\n    await(promise) {\r\n        this._promises.push(promise);\r\n    }\r\n\r\n    /**\r\n     * If event handlers added long running promisses through the await function this method can be used\r\n     * to chain more processes that should only run after these event promises have resolved.\r\n     * @param {*} data A convenient way to enable this method to be chained. \r\n     *                 Any data passed will be passed along untouched down at the end of the wait promise.\r\n     * @returns {Promise} A promise which will pass the provided data object if passed.\r\n     */\r\n    wait(data) {\r\n        this._base.emit(this._eventName, {\r\n            name: this._eventName,\r\n            target: this._base,\r\n            args: this.args,\r\n            await: this.await.bind(this)\r\n        });\r\n        return Promise.all(this._promises).then(() => data);\r\n    }\r\n}\r\n\r\n/**\r\n * A model facade class that encapsulates promise handling and connection management.\r\n * @extends ModelBase\r\n */\r\nexport class ModelProxy extends ModelBase {\r\n\r\n    /**\r\n     * \r\n     * @param {object} options Model configuration\r\n     * @param {(constructor|string)} options.adapter Adapter constructor to load or instantiate.\r\n     * @param {string} options.primary_key The field name of the model's primary key (default: 'id')\r\n     * @param {object} options.schema A json schema object defining the fields of the model. Not all models require it as usually this would al ready exists for selfcontained models.\r\n     * @param {boolean} options.autoDisconnect If true, an extra call to disconnect() will be added to the promise chain.\r\n     */\r\n    constructor(options) {\r\n        super(options);\r\n\r\n        this._model = new options.model(this.options);\r\n    }\r\n\r\n    get primaryKey() {\r\n        return this.options.primary_key;\r\n    }\r\n\r\n    recordDecorator(record) {\r\n        record.$id = record[this.options.primary_key];\r\n        return record;\r\n    }\r\n\r\n    async isConnected(data) {\r\n        return this._model.isConnected(data);\r\n    }\r\n\r\n    /**\r\n     * Connects the model to its backend.\r\n     * @param {*} data Any object to pass along when Promise chained.\r\n     * @fires beforeConnect Before connecting event.\r\n     * @fires afterConnect After connecting event.\r\n     * @returns {Promise} A promise resolved once the model's backend is connected.\r\n     */\r\n    async connect(data) {\r\n        /**\r\n         * Before connecting\r\n         * @event ModelProxy#beforeConnect\r\n         * @type {AsyncEvent}\r\n         */\r\n        let beforeConnectEvent = new AsyncEvent('beforeConnect', this, {});\r\n\r\n        /**\r\n         * After connecting\r\n         * @event ModelProxy#afterConnect\r\n         * @type {AsyncEvent}\r\n         */\r\n\r\n        return beforeConnectEvent.wait(data)\r\n            .then(data => this._model.connect(data))\r\n            .then(data => new AsyncEvent('afterConnect', this, {}).wait(data))\r\n    }\r\n\r\n    /**\r\n     * Disconnects the model from its backend\r\n     * @param {*} data Any object to pass along when Promise chained.\r\n     * @fires beforeDisconnect Before disconnecting event.\r\n     * @fires afterDisconnect After disconnecting event.\r\n     * @returns {Promise} A promise resolved once the model's backend is disconnected.\r\n     */\r\n    async disconnect(data) {\r\n        /**\r\n         * Before disconnecting\r\n         * @event ModelProxy#beforeDisconnect\r\n         * @type {AsyncEvent}\r\n         */\r\n        let beforeDisconnectEvent = new AsyncEvent('beforeDisconnect', this, {});\r\n\r\n        /**\r\n         * After disconnecting\r\n         * @event ModelProxy#aftereDisconnect\r\n         * @type {AsyncEvent}\r\n         */\r\n\r\n        return beforeDisconnectEvent.wait(data)\r\n            .then(data => this._model.disconnect(data))\r\n            .then(data => new AsyncEvent('afterDisconnect', this, {}).wait(data))\r\n    }\r\n\r\n    /**\r\n     * Data fetch method. Accepts either a 'where' arrow function or more complex\r\n     * object containing where, orderby, start, limit options.\r\n     * @param {(function|object)} query Query arrow function or object containing query definition.\r\n     * @param {function} query.where An arror function defining where operation(an arrow function is required)\r\n     * @param {function} query.orderby An arrow function defining sorting(an arrow function is required)\r\n     * @param {int} query.start Pagination start index\r\n     * @param {int} query.limit Pagination record length\r\n     * @fires beforeFetch Before disconnecting event.\r\n     * @fires afterFetch After disconnecting event.\r\n     * @returns {Promise.<object>} When fulfilled promise returns: { rows: <Array>, total: <int> }\r\n     */\r\n    async fetch(query={}) {\r\n\r\n        /** Accept an arrow function as 'where' condition */\r\n        if (isArrowFunction(query)) {\r\n            query = { where: query };\r\n        }\r\n\r\n        if ( !('limit' in query) ) {\r\n            query.limit = 20;\r\n        }\r\n\r\n        if (!('start' in query)) {\r\n            query.start = 0;\r\n        }\r\n\r\n        let chain = this._model.isConnected(query)\r\n            .catch(() => {\r\n                return this.connect(query)\r\n            })\r\n\r\n        /**\r\n         * Before fetch\r\n         * @event ModelProxy#beforeFetch\r\n         * @property {object} query Query object containing, where, orderby, start and limit properties.\r\n         * @property {function} query.where A where arrow function definition.\r\n         * @property {function} query.orderby A record order by definition arrow function.\r\n         * @property {int} query.start The record start index, used in pagination mostly.\r\n         * @property {int} query.limit The maximum number of records to return.\r\n         * @type {AsyncEvent}\r\n         */\r\n        let beforeFetchEvent = new AsyncEvent('beforeFetch', this, { query });\r\n\r\n        /**\r\n         * After fetch\r\n         * @event ModelProxy#afterFetch\r\n         * @property {object} result A query result object containing records fetched.\r\n         * @property {Array} result.rows Records fetched.\r\n         * @type {AsyncEvent}\r\n         */\r\n\r\n        chain = chain.then(query => beforeFetchEvent.wait(query))\r\n            .then(query => this._model.fetch(query))\r\n            .then(result => new AsyncEvent('afterFetch', this, { result }).wait(result));\r\n\r\n        if (this.options.autoDisconnect) {\r\n            chain = chain.then(result => this.disconnect(result));\r\n        }\r\n\r\n        return chain;\r\n    }\r\n\r\n    /**\r\n     * Updates an array of data\r\n     * @param {(object|Array)} data  object containing a 'rows' array key with records to update. You may also pass just an array of rows.\r\n     * @param {Array} data.rows  object containing a 'rows' array key with records to update. You may also pass just an array of rows.\r\n     * @fires beforeUpdate Before disconnecting event.\r\n     * @fires afterUpdate After disconnecting event.\r\n     * @returns {Promise.<object>} When fulfilled promise returns: { rows: <Array> }\r\n     */\r\n    async update(data) {\r\n\r\n        if (data.constructor == Array ) {\r\n            data = { rows: data };\r\n        }\r\n\r\n        let chain = this._model.isConnected(data)\r\n            .catch(() => {\r\n                return this.connect(data)\r\n            })\r\n\r\n\r\n        /**\r\n         * Before update\r\n         * @event ModelProxy#beforeUpdate\r\n         * @property { object } data \r\n         * @property { Array } data.rows Array of records to update.\r\n         * @type {AsyncEvent}\r\n         */\r\n        let beforeUpdateEvent = new AsyncEvent('beforeUpdate', this, data);\r\n\r\n        /**\r\n         * After update\r\n         * @event ModelProxy#afterUpdate\r\n         * @property { object } data \r\n         * @property { Array } data.rows Array of updated records.\r\n         * @type {AsyncEvent}\r\n         */\r\n\r\n        chain = chain.then(data => beforeUpdateEvent.wait(data))\r\n            .then(data => this._model.update(data))\r\n            .then(data => new AsyncEvent('afterUpdate', this, data).wait(data))\r\n\r\n        if (this.options.autoDisconnect) {\r\n            chain = chain.then(result => this.disconnect(result));\r\n        }\r\n\r\n        return chain;\r\n    }\r\n\r\n    /**\r\n     * Creates a list of records.\r\n     * @param {(object|Array)} data Either an Array of records or an object containing an Array key named 'rows'.\r\n     * @param {Array} data.rows Array containing records to create.\r\n     * @fires beforeCreate Before disconnecting event.\r\n     * @fires afterCreate After disconnecting event.\r\n     * @returns {Promise.<object>} List of records created. Object signature: { rows: <Array> }\r\n     */\r\n    async create(data) {\r\n\r\n        if ( data.constructor == Array ) {\r\n            data = { rows: data };\r\n        }\r\n\r\n        let chain = this._model.isConnected(data)\r\n            .catch(() => {\r\n                return this.connect(data)\r\n            })\r\n\r\n        /**\r\n         * Before create\r\n         * @event ModelProxy#beforeCreate\r\n         * @property {object} data Object with records to create.\r\n         * @property {Array} data.rows Records to create.\r\n         * @type {AsyncEvent}\r\n         */\r\n        let beforeCreateEvent = new AsyncEvent('beforeCreate', this, data);\r\n\r\n        /**\r\n         * After create\r\n         * @event ModelProxy#aftereCreate\r\n         * @property {Array} data Object containing new records.\r\n         * @property {Array} data.rows Array of records created.\r\n         * @type {AsyncEvent}\r\n         */\r\n\r\n        chain = chain.then(data => beforeCreateEvent.wait(data))\r\n            .then(data => this._model.create(data))\r\n            .then(data => new AsyncEvent('afterCreate', this, data).wait(data));\r\n\r\n        if (this.options.autoDisconnect) {\r\n            chain = chain.then(result => this.disconnect(result));\r\n        }\r\n\r\n        return chain;\r\n    }\r\n\r\n    /**\r\n     * Delete records by ids\r\n     * @param {Array} ids The records ids to delete.\r\n     * @fires beforeDelete Before disconnecting event.\r\n     * @fires afterDelete After disconnecting event.\r\n     * @returns {Promise.<Array>} When fulfilled promise returns an array of deleted ids.\r\n     */\r\n    async delete(ids) {\r\n        let chain = this._model.isConnected(ids)\r\n            .catch(() => {\r\n                return this.connect(ids)\r\n            })\r\n\r\n\r\n        /**\r\n         * Before delete\r\n         * @event ModelProxy#beforeDelete\r\n         * @property {object} data \r\n         * @property {Array} data.ids The record ids to delete.\r\n         * @type {AsyncEvent}\r\n         */\r\n        let beforeDeleteEvent = new AsyncEvent('beforeDelete', this, { ids });\r\n\r\n        /**\r\n         * After delete\r\n         * @event ModelProxy#aftereDelete\r\n         * @property {object} data\r\n         * @property {Array} data.ids The record ids deleted.\r\n         * @type {AsyncEvent}\r\n         */\r\n\r\n        chain = chain.then(ids => beforeDeleteEvent.wait(ids))\r\n            .then(ids => this._model.delete(ids))\r\n            .then(ids => new AsyncEvent('afterDelete', this, { ids }).wait(ids));\r\n\r\n        if (this.options.autoDisconnect) {\r\n            chain = chain.then(result => this.disconnect(result));\r\n        }\r\n\r\n        return chain;\r\n    }\r\n}","import { asc, desc, multiColSort } from '../queryUtils';\r\nimport { ModelBase } from '../modelBase';\r\n\r\n/**\r\n * Reference model implementation based on simple object arrays\r\n * @class\r\n * @extends ModelBase\r\n */\r\nexport class ArrayModel extends ModelBase {\r\n    constructor(options) {\r\n        super(options);\r\n        this._data = this.options.data;\r\n        this._connected = false;\r\n    }\r\n\r\n    /**\r\n     * @returns {Promise} Resolves if connected else rejects\r\n     * @override\r\n     */\r\n    async isConnected(data) {\r\n        if ( this._connected ) {\r\n            return Promise.resolve(data);\r\n        }\r\n        return Promise.reject(false);\r\n    }\r\n\r\n    /**\r\n     * To simulate and stay api compliant, this model implements connecting/disconnecting behaviour.\r\n     * @param {*} data \r\n     * @returns {Promise}\r\n     * @override\r\n     */\r\n    async connect(data) {\r\n        return new Promise(resolve => {\r\n            this._connected = true;\r\n            return resolve(data)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * To simulate and stay api compliant, this model implements connecting/disconnecting behaviour.\r\n     * @param {*} data \r\n     * @returns {Promise}\r\n     * @override\r\n     */\r\n    async disconnect(data) {\r\n        return new Promise(resolve => {\r\n            this._connected = false;\r\n            return resolve(data)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetches rows using where, order, start and limit query parameters\r\n     * @param {*} query An object containing a set of query definitions.\r\n     * @param {function} query.where An arror function defining where operation(an arrow function is required)\r\n     * @param {function} query.orderby An arrow function defining sorting(an arrow function is required)\r\n     * @param {int} query.start Pagination start index\r\n     * @param {int} query.limit Pagination record length\r\n     * @returns {Promise}\r\n     * @override\r\n     */\r\n    async fetch({ where, orderby, start, limit }) {\r\n        return new Promise(success => {\r\n            let result = {\r\n                rows: [],\r\n                total: 100\r\n            }\r\n\r\n            if (start === undefined) { start = 0 }\r\n            if (limit === undefined) { limit = 20 }\r\n\r\n            let count = 0;\r\n            for (let i = 0; i < this._data.length; i++) {\r\n                let row = Object.assign({\r\n                    $id: this._data[i][this.options.primary_key]\r\n                }, this._data[i]);\r\n\r\n                let matchCondition = where ? where(row) : true;\r\n                if (matchCondition) {\r\n                    result.rows.push(row);\r\n                }\r\n            }\r\n\r\n            let rowFields = Object.assign({\r\n                $id: this.options.primary_key\r\n            }, this.options.schema.properties);\r\n\r\n            if (orderby) {\r\n                result.rows = result.rows.sort(multiColSort(orderby(rowFields)));\r\n            }\r\n\r\n            result.rows = result.rows.slice(start, start + limit);\r\n\r\n            result.rows.forEach(r => {\r\n                delete r.$id;\r\n            });\r\n\r\n            return success(result);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Updates rows provided by passing an object containing a \"rows\" array property.\r\n     * @param {*} data Object containing rows in a \"rows\" property\r\n     * @returns {Promise} Returns the provided data with the rows updated.\r\n     * @override\r\n     */\r\n    async update(data) {\r\n        return new Promise(success => {\r\n            data.rows.forEach(row => {\r\n\r\n                this._data.find((r, i) => {\r\n                    if (r.id == row.id) {\r\n                        this._data[i] = row;\r\n                        return true;\r\n                    }\r\n                })\r\n\r\n            });\r\n            return success(data);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Deletes all records matching the provided ids.\r\n     * @param {Array} ids \r\n     * @returns {Promise}\r\n     * @override\r\n     */\r\n    async delete(ids) {\r\n        return new Promise(success => {\r\n            ids.forEach((id) => {\r\n                this._data.find((r, i) => {\r\n                    if (r.id == id) {\r\n                        this._data.splice(i, 1);\r\n                        return true;\r\n                    }\r\n                });\r\n            })\r\n\r\n            return success(ids);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates all the records provided. Returning the same records updated with their identifier.\r\n     * @param {Array} rows Array of records to create\r\n     * @returns {Promise}\r\n     * @override\r\n     */\r\n    async create(data) {\r\n        return new Promise(success => {\r\n            let lastId = this._data[this._data.length - 1].id;\r\n            data.rows.forEach((row, i) => {\r\n                row.id = ++lastId;\r\n                this._data.push(row);\r\n            });\r\n\r\n            success(data);\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport default ArrayModel;","/**\r\n * A Timeout Error\r\n */\r\nexport class TimeoutError extends Error {\r\n    /**\r\n     * cosntructor\r\n     */\r\n    constructor() {\r\n        super('A timeout has occured');\r\n        this.name = 'TimeoutError';\r\n    }\r\n}\r\n\r\n/**\r\n * Remote Error. Encapsulates the service, a message and remote error stack if available.\r\n */\r\nexport class RemoteError extends Error {\r\n    /**\r\n     * constructor\r\n     * @param {string} service The service or model that threw the exception.\r\n     * @param {string} msg A message indicating the reason.\r\n     * @param {string} stack A stack trace of the remote error if available.\r\n     */\r\n    constructor(service, msg, stack) {\r\n        super(`A remote service error has occured (${service}) => ${msg}`);\r\n        this.name = \"RemoteError\";\r\n        this.service = service;\r\n        this.remoteStack = stack;\r\n    }\r\n}\r\n\r\n/**\r\n * Unexpected remote response Error. Encapsulates service, a sample of the returned data and a message.\r\n */\r\nexport class UnexpectedResponseError extends Error {\r\n    /**\r\n     * \r\n     * @param {string} service The service or model that threw the exception.\r\n     * @param {*} sample A sample of the data returned.\r\n     * @param {string} msg A message indicating the reason.\r\n     */\r\n    constructor(service, sample, msg) {\r\n        super(`Remote service (${service}) responded with unexpected data => ${msg}`);\r\n        this.name = \"UnexpectedRemoteResponse\";\r\n        this.service = service;\r\n        this.sample = sample;\r\n    }\r\n}\r\n\r\n/**\r\n * Mock request error. Encapsulates mock errors thrown on unit test rest services.\r\n */\r\nexport class MockRequestError extends Error {\r\n    /**\r\n     * constructor\r\n     * @param {object} response The response object of the mock request\r\n     * @param {object} request the request object of the mock request\r\n     */\r\n    constructor(response, request) {\r\n        super(`Mock Request Error: ${response.status}: ${response.statusText}`);\r\n        this.response = response;\r\n        this.request = request;\r\n    }\r\n}","/**\r\n * Utility timout function, calls timeoutFn if returned function isn't called without its timeout window.\r\n * @param {functino} fn \r\n * @param {int} timeout \r\n * @param {function} timeoutFn \r\n */\r\nexport function Timeout(fn, timeout, timeoutFn) {\r\n    let timeoutRef = setTimeout(timeoutFn, timeout);\r\n\r\n    return function() {\r\n        clearTimeout(timeoutRef);\r\n        fn.call(fn, arguments);\r\n    }\r\n}\r\n\r\n/**\r\n * Takes a string and padds every line\r\n * @param {string} lines A string containing multiple lines\r\n * @param {int} padding Amount of left padding\r\n * @param {int} skip Number of first lines to skip. (default 1)\r\n */\r\nexport function leftPadLines(lines, padding, skip = 0) {\r\n    lines = JSON.stringify(lines, null, 4).trim().split(\"\\n\");\r\n\r\n    return lines.reduce((c, v, i) => {\r\n        if (i <= skip) {\r\n            return c + v;\r\n        } else {\r\n            return c + \"\\n\" + Array(padding).join(\" \") + v;\r\n        }\r\n    }, '')\r\n}\r\n\r\n/**\r\n * Helper function, capitalizes the first letter of every word in string.\r\n * @param {string} value String to capitalize words.\r\n * @param {int} skip Number of words to skip from begining.\r\n * @return {string}\r\n */\r\nexport function capitalize(value, skip) {\r\n    if (value.constructor !== Array) {\r\n        value = [value];\r\n    }\r\n\r\n    return value.reduce((c, v, i) => {\r\n        if (i <= skip) {\r\n            c.push(v);\r\n        } else {\r\n            c.push(v.charAt(0).toUpperCase() + v.slice(1));\r\n        }\r\n        return c;\r\n    }, []);\r\n}\r\n\r\n/**\r\n * Capitalizes and removes spaces from string. Usually used on fields\r\n * @param {string} value string to normalize\r\n * @return {string}\r\n */\r\nexport function normalizeField(value) {\r\n    return capitalize(value.split(' '), 1).join('');\r\n}\r\n","import { asc, desc, multiColSort } from '../queryUtils';\r\nimport { ModelBase } from '../modelBase';\r\nimport { Schema } from '../schema';\r\nimport { RemoteError } from '../errors';\r\nimport { leftPadLines, normalizeField, capitalize } from '../utils';\r\nconst axios = require('axios');\r\n\r\n/**\r\n * A generic and extensible Rest model.\r\n * @extends ModelBase\r\n */\r\nexport class RestModel extends ModelBase {\r\n    constructor(options) {\r\n        super(options);\r\n\r\n        this._connected = false;\r\n        this.cookies = {};\r\n        this.fields = [];\r\n        this.meta = {\r\n            fields: {\r\n                $id: this.options.primary_key\r\n            }\r\n        }\r\n\r\n        this._http = this.options.http || axios.create({\r\n            validateStatus: function (status) {\r\n                return status >= 200 && status < 300; // default\r\n            }\r\n        });\r\n\r\n        if (this.options.schema) {\r\n            this.fields = Object.keys(this.options.schema.properties);\r\n\r\n            for(let i in this.fields) {\r\n                let field = this.fields[i];\r\n                let normalizedField = normalizeField(field);\r\n                this.meta.fields[normalizedField] = field;\r\n            }\r\n        }\r\n    }\r\n\r\n    getEndPoint(action, options, id, args, data) {\r\n        let argStr = '';\r\n        if ( action == 'fetch' ) {\r\n            let tmpArgs = [];\r\n            for(var k in args) {\r\n                if (args[k] !== undefined) {\r\n                    tmpArgs.push(`${k}=${encodeURIComponent(args[k])}`);\r\n                }\r\n            }\r\n            argStr = tmpArgs.join('&');\r\n        }\r\n        let ACTIONS = {\r\n            connect: {\r\n                url: `${options.baseUrl}/login`,\r\n                method: 'get'\r\n            },\r\n            disconnect: {\r\n                url: `${options.baseUrl}/logout`,\r\n                method: 'get'      \r\n            },\r\n            fetch: {\r\n                url: `${options.baseUrl}/resource/${this.options.resource}${id ? '/' + id : ''}${argStr ? '?' + argStr : ''}`,\r\n                method: 'get'\r\n            },\r\n            create: {\r\n                url: `${options.baseUrl}/resource/${this.options.resource}`,\r\n                method: 'post',\r\n                data\r\n            },\r\n            update: {\r\n                url: `${options.baseUrl}/resource/${this.options.resource}`,\r\n                method: 'put',\r\n                data\r\n            },\r\n            delete: {\r\n                url: `${options.baseUrl}/resource/${this.options.resource}/${id}`,\r\n                method: 'delete'\r\n            },\r\n            default: {\r\n                url: `${options.baseUrl}`,\r\n                method: 'get'\r\n            }\r\n        }\r\n\r\n        let finalAction = null;\r\n        if ( typeof this.options.getEndPoint == 'function' ) {\r\n            finalAction = this.options.getEndPoint(action, options, id);\r\n        } else {\r\n            finalAction = action in ACTIONS ? ACTIONS[action] : ACTIONS.default;\r\n        }\r\n\r\n        if ( this.options.debug ) {\r\n            console.log(\"endPoint: \", finalAction);\r\n        }\r\n\r\n        return finalAction;\r\n    }\r\n\r\n    HTTP(endPoint) {\r\n\r\n        let opts = Object.assign({\r\n            method: 'GET'\r\n        },  this.options.defaultRequestOptions || {}, endPoint);\r\n\r\n        if (this.options.debug) {\r\n            console.log('\\nHTTP CALL : ', leftPadLines(endPoint, 14));\r\n            console.log('   - OPTS : ', leftPadLines(opts, 14));\r\n        }\r\n\r\n        return this._http.request(opts);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @returns {Promise} true when connected\r\n     * @override\r\n     */\r\n    async isConnected(data) {\r\n        let isConnectedPromise = null;\r\n        if (typeof this.options.isConnected == 'function') {\r\n            isConnectedPromise = this.options.isConnected();\r\n        } else if ( this._connected ) {\r\n            this.isConnectedPromise = Promise.resolve(data);\r\n        } else {\r\n            this.isConnectedPromise = Promise.reject();\r\n        }\r\n\r\n        return isConnectedPromise.then((data) => {\r\n            this._connected = true;\r\n            return data;\r\n        })\r\n        .catch(() => {\r\n            this._connected = false;\r\n        })\r\n    }\r\n\r\n    /**\r\n     * To simulate and stay api compliant, this model implements connecting/disconnecting behaviour.\r\n     * @param {*} data \r\n     * @returns {Promise}\r\n     * @override\r\n     */\r\n    async connect(data) {\r\n        let connectPromise = null;\r\n        let endPoint = this.getEndPoint('connect', this.options);\r\n\r\n        // allow overwriting connect promise with user version if required.\r\n        if ( this.options.connect ) {\r\n            connectPromise = this.options.connect(endPoint, this.options, this.HTTP.bind(this))\r\n        } else {\r\n            connectPromise = this.HTTP(endPoint);\r\n        }\r\n\r\n        // either way, the promise must return a response that at least contains\r\n        // the status key with the resulting http response code.\r\n        return connectPromise.then(response => {\r\n            this._connected = true;\r\n            return response.data;\r\n        }).catch(err => {\r\n            let response = err.response;\r\n            this._connected = false;\r\n            return Promise.reject(new RemoteError(\"REST\", `${response.status}: ${response.statusText}`, response.data));\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * To simulate and stay api compliant, this model implements connecting/disconnecting behaviour.\r\n     * @param {*} data \r\n     * @returns {Promise}\r\n     * @override\r\n     */\r\n    async disconnect(data) {\r\n        let disconnectPromise = null;\r\n        let endPoint = this.getEndPoint('disconnect', this.options);\r\n        if (this.options.disconnect) {\r\n            disconnectPromise = this.options.disconnect(endPoint, this.options, this.HTTP.bind(this))\r\n        } else {\r\n            disconnectPromise = this.HTTP(endPoint);\r\n        }\r\n\r\n        return disconnectPromise.then(response => {\r\n            if ( response.status == 200) {\r\n                this._connected = false;\r\n                return data;\r\n            } else {\r\n                this._connected = false;\r\n                throw new Error(\"Error while disconnecting\")\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetches rows using where, order, start and limit query parameters\r\n     * @param {*} query An object containing a set of query definitions.\r\n     * @returns {Promise}\r\n     * @override\r\n     */\r\n    async fetch({ where, orderby, start, limit }) {\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let whereAst, orderbyAst;\r\n\r\n            if ( where ) {\r\n                whereAst = jsep(where.toString());\r\n            }\r\n\r\n            if ( orderby ) {\r\n                orderbyAst = jsep(orderby.toString());\r\n            }\r\n\r\n            let result = {\r\n                rows: [],\r\n                total: 100\r\n            }\r\n\r\n            if (start === undefined) { start = 0 }\r\n            if (limit === undefined) { limit = 20 }\r\n\r\n            \r\n            let endPoint = this.getEndPoint('fetch', this.options);\r\n            return this.HTTP(endPoint);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Updates rows provided by passing an object containing a \"rows\" array property.\r\n     * @param {*} data Object containing rows in a \"rows\" property\r\n     * @returns {Promise} Returns the provided data with the rows updated.\r\n     * @override\r\n     */\r\n    async update(data) {\r\n        let promises = [];\r\n        data.rows.forEach(row => {\r\n            let endPoint = this.getEndPoint('update', this.options, row.id, null, row);\r\n            promises.push(this.HTTP(endPoint).then(result => { \r\n                return result.data.data \r\n            }));\r\n        });\r\n\r\n        return Promise.all(promises).then(results => {\r\n            return {\r\n                rows: results\r\n            };\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Deletes all records matching the provided ids.\r\n     * @param {Array} ids \r\n     * @returns {Promise}\r\n     * @override\r\n     */\r\n    async delete(ids) {\r\n        let promises = [];\r\n        ids.forEach(id => {\r\n            let endPoint = this.getEndPoint('delete', this.options, id);\r\n            promises.push((function (endPoint, id) { \r\n                return this.HTTP(endPoint).then(result => {\r\n                    return id;\r\n                }).catch(err => {\r\n                    return {\r\n                        id,\r\n                        errorMessage: \"Error deleting record\",\r\n                        debug: err\r\n                    }\r\n                });\r\n            }.bind(this))(endPoint, id));\r\n        });\r\n\r\n        return Promise.all(promises).then(results => {\r\n            return {\r\n                rows: results\r\n            };\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates all the records provided. Returning the same records updated with their identifier.\r\n     * @param {Array} rows Array of records to create\r\n     * @returns {Promise}\r\n     * @override\r\n     */\r\n    async create(data) {\r\n        let promises = [];\r\n        data.rows.forEach(row => {\r\n            let endPoint = this.getEndPoint('create', this.options, null, null, row);\r\n            promises.push(this.HTTP(endPoint).then(result => {\r\n                return result.data.data\r\n            }));\r\n        });\r\n\r\n        return Promise.all(promises).then(results => {\r\n            return {\r\n                rows: results\r\n            };\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport default RestModel;","const jsep = require('jsep');\r\njsep.addBinaryOp(\"^\");\r\njsep.addUnaryOp('@');\r\njsep.removeBinaryOp(\">>>\");\r\njsep.removeBinaryOp(\"<<<\");\r\njsep.removeUnaryOp(\"~\");\r\n\r\nexport class ExpressionBuilder {\r\n    constructor(options) {\r\n        this.options = options;\r\n        this.ast = null;\r\n    }\r\n\r\n    parse(expOrArrowFn) {\r\n        let src = expOrArrowFn.toString();\r\n        let rx = /([^=>]+)\\s*=>\\s*(.+)/gi\r\n        let result = rx.exec(src);\r\n        this.ast = jsep(result[2]);\r\n        return this;\r\n    }\r\n\r\n    transform(transform) {\r\n        if ( !transform  ) {\r\n            transform = this.options.transform;\r\n        }\r\n\r\n        return transform.run(this.ast);\r\n    }\r\n\r\n}","\r\nexport class AstTransform {\r\n    constructor(state, opts) {\r\n        this.state = state;\r\n        this.options = Object.assign({\r\n            debug: false,\r\n            allowBinaryExpressions: true,\r\n            allowLogicalExpressions: true,\r\n            allowMemberExpressions: true,\r\n            allowCallExpressions: true,\r\n            allowLiterals: true,\r\n            allowIdentifier: true,\r\n            allowArrayExpression: false,\r\n            formatter: deafultFormatter\r\n        }, opts);\r\n    }\r\n\r\n    run(ast) {\r\n        if ( this.options.debug ) {\r\n            console.log(JSON.stringify(ast, null, '  '));\r\n        }\r\n\r\n        let expFn = this.buildAstFnTree(ast);\r\n        return unwrap(expFn).format();\r\n    }\r\n\r\n    buildAstFnTree(ast) {       \r\n        let expFn = null;\r\n        if (ast.type == 'BinaryExpression' && this.options.allowBinaryExpressions ) {\r\n            expFn = this.onBinaryExpression.bind(this, \r\n                ast.operator,\r\n                this.buildAstFnTree(ast.left),\r\n                this.buildAstFnTree(ast.right)\r\n            );\r\n        } else if (ast.type == 'LogicalExpression' && this.options.allowLogicalExpressions ) {\r\n            expFn = this.onLogicalExpression.bind(this,\r\n                ast.operator,\r\n                this.buildAstFnTree(ast.left),\r\n                this.buildAstFnTree(ast.right)\r\n            );\r\n        } else if (ast.type == 'MemberExpression' && this.options.allowMemberExpressions ) {\r\n            expFn = this.onMemberExpression.bind(this,\r\n                ast.computed,\r\n                this.buildAstFnTree(ast.object),\r\n                this.buildAstFnTree(ast.property)\r\n            );\r\n        } else if (ast.type == 'Identifier' && this.options.allowIdentifier ) {\r\n            expFn = this.onIdentifier.bind(this,\r\n                ast.name\r\n            );\r\n        } else if (ast.type == 'Literal' && this.options.allowLiterals ) {\r\n            expFn = this.onLiteral.bind(this,\r\n                ast.value,\r\n                ast.raw\r\n            );\r\n        } else if (ast.type == 'CallExpression' && this.options.allowCallExpressions ) {\r\n            let args = ast.arguments.reduce((c, v) => {\r\n                c.push(this.buildAstFnTree(v));\r\n                return c;\r\n            }, []);\r\n\r\n            expFn = this.onCallExpression.bind(this,\r\n                this.buildAstFnTree(ast.callee),\r\n                args\r\n            );\r\n        } else if (ast.type == \"ArrayExpression\" && this.options.allowArrayExpression) {\r\n            let elements = ast.elements.reduce((c, v) => {\r\n                c.push(this.buildAstFnTree(v));\r\n                return c;\r\n            }, []);\r\n            expFn = this.onArrayExpression.bind(this, elements);\r\n        } else {\r\n            throw new Error(`Unhandled ast type: ${ast.type}`);\r\n        }\r\n\r\n        return expFn;\r\n    }\r\n\r\n    onArrayExpression(elements) {\r\n        var elResolved = elements.reduce((c, v) => {\r\n            let value = unwrap(v);\r\n            c.push(value.format());\r\n            return c;\r\n        }, []);\r\n\r\n        let result = AstValue(elResolved.join(', '), 'arrayExpression', this.options.formatter);\r\n        return result;\r\n    }\r\n\r\n    onLogicalExpression(op, left, right) {\r\n        left = unwrap(left).format();\r\n        right = unwrap(right).format();\r\n        return AstValue(`${left} ${op} ${right}`, 'logicalExpression', this.options.formatter);\r\n    }\r\n\r\n    onBinaryExpression(op, left, right) {\r\n        let leftValue = unwrap(left).format();\r\n        let rightValue = unwrap(right).format();\r\n        return AstValue(`${leftValue} ${op} ${rightValue}`, 'binaryExpression', this.options.format);\r\n    }\r\n\r\n    onCallExpression(callee, args) {\r\n        var argsResolved = args.reduce((c, v) => {\r\n            let value = unwrap(v).format();\r\n            c.push(value);\r\n            return c;\r\n        }, []);\r\n        return AstValue(`${callee()}(${argsResolved.join(', ')})`, 'callExpression', this.options.format);\r\n    }\r\n\r\n    onMemberExpression(computed, obj, property) {\r\n        if (computed) {\r\n            let objInst = unwrap(obj).value;\r\n            let comp = unwrap(property).format();\r\n            let value = objInst[comp];\r\n            let objValue = AstValue(value, null, this.options.formatter);\r\n            return objValue;\r\n        } else {\r\n            let objKey = unwrap(obj).format();\r\n            let prop = unwrap(property).format();\r\n            let objInst = this.state[objKey];\r\n            let value = objInst[prop];\r\n            let type = objKey == 'r' ? 'field' : typeof value;\r\n            let objValue = AstValue(value, type, this.options.formatter);\r\n            return objValue;\r\n        }\r\n    }\r\n\r\n    onIdentifier(name) {\r\n        return AstValue(name, \"identifier\", this.options.formatter);\r\n    }\r\n\r\n    onLiteral(value, raw) {\r\n        return AstValue(value, null, this.options.formatter);\r\n    }\r\n}\r\n\r\nexport function unwrap(value) {\r\n    while(typeof value === 'function') {\r\n        value = value();\r\n    }\r\n\r\n    return value;\r\n}\r\n\r\nexport function deafultFormatter(astValue) {\r\n    if (astValue.type == \"string\") {\r\n        return JSON.stringify(astValue.value);\r\n    } else if (astValue.type == \"identifier\") {\r\n        return astValue.value;\r\n    } else if (astValue.type == \"number\") {\r\n        return astValue.value;\r\n    }\r\n\r\n    return astValue.value;\r\n}\r\n\r\nexport function AstValue(value, type, formatter) {\r\n    if (!type) {\r\n        type = typeof value;\r\n    }\r\n    if (!formatter) {\r\n        formatter = deafultFormatter;\r\n    }\r\n\r\n    return {\r\n        value,\r\n        type,\r\n        [Symbol.toPrimitive](hint) {\r\n            return value;\r\n        },\r\n        format() {\r\n            return (formatter) ? formatter({ value, type }) : value;\r\n        }\r\n    };\r\n}","import { AstTransform, unwrap, AstValue } from '../astTransforms';\r\n\r\nexport function FrappeValueFormatter(astValue) {\r\n    if (astValue.type == \"string\") {\r\n        return JSON.stringify(astValue.value);\r\n    } else if (astValue.type == \"identifier\") {\r\n        return astValue.value;\r\n    } else if (astValue.type == \"number\") {\r\n        return astValue.value;\r\n    } else if (astValue.type == \"field\") {\r\n        return JSON.stringify(astValue.value);\r\n    }\r\n\r\n    return astValue.value;\r\n}\r\n\r\nexport default class FrappeRestQueryAstTransform extends AstTransform {\r\n\r\n    constructor(state, opts) {\r\n        super(state, Object.assign({\r\n            formatter: FrappeValueFormatter\r\n        }, opts));\r\n    }\r\n\r\n    run(ast) {\r\n        let result = super.run(ast);\r\n\r\n        if ( typeof this.options.finalize == 'function' ) {\r\n            return this.options.finalize(result);\r\n        } else {\r\n            if ( result.charAt(1) != '[' ) {\r\n                result = `[${result}]`;\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n\r\n    onLogicalExpression(op, left, right) {\r\n        left = unwrap(left).format();\r\n        right = unwrap(right).format();\r\n        if ( op != '&&' ) {\r\n            new new Error(`Unsupported operator: ${op}`)\r\n        }\r\n        return AstValue(`[${left}, ${right}]`, 'logicalExpression', this.options.formatter);\r\n    }\r\n\r\n    onBinaryExpression(op, left, right) {\r\n        let leftValue = unwrap(left).format();\r\n        let rightValue = unwrap(right).format();\r\n        if ( op == '==' ) {\r\n            op = '=';\r\n        }\r\n        return AstValue(`[${leftValue}, \"${op}\", ${rightValue}]`, 'binaryExpression', this.options.formatter);\r\n    }\r\n\r\n    onCallExpression(callee, args) {\r\n        let calleeName = unwrap(callee).format().toLowerCase();\r\n        let result = '';\r\n        if ( calleeName == 'like' ) {\r\n            let field = unwrap(args[0]).format();\r\n            let match = unwrap(args[1]).format();\r\n            result = `[${field}, \"LIKE\", ${match}]`;\r\n        } else if ( calleeName == 'asc' ) {\r\n            // frappe's asc, desc are only used during order_by calls\r\n            // which it self is a string that breaks formatting as handled\r\n            // by filter queries.\r\n            // We'll swap field type so we don't double quote fields.\r\n            let field = AstValue(unwrap(args[0]).value, \"identifier\", this.options.formatter).format();\r\n            result = `${field} ASC`;\r\n        } else if (calleeName == 'desc') {\r\n            let field = AstValue(unwrap(args[0]).value, \"identifier\", this.options.formatter).format();\r\n            result = `${field} DESC`;\r\n        }\r\n\r\n        return AstValue(result, 'callExpression', this.options.formatter);\r\n    }\r\n\r\n}","import RestModel from './rest';\r\nimport { ExpressionBuilder } from '../expressions';\r\nimport FrappeRestQueryAstTransform from '../astTransforms/frappe';\r\nimport { RemoteError, UnexpectedResponseError } from '../errors';\r\n\r\n/**\r\n * A generic model which wraps Frappe's REST api for their Doctypes.\r\n * @package thirdparty.models\r\n * @extends RestModel\r\n */\r\nexport class FrappeDoctypeModel extends RestModel {\r\n\r\n    /**\r\n     * \r\n     * @param {object} options \r\n     */\r\n    constructor(options) {\r\n        super(Object.assign({\r\n        }, options));\r\n    }\r\n\r\n    /**\r\n     * Overwrites rest getEndPoint\r\n     * @param {string} action \r\n     * @param {object} options \r\n     * @param {*} id \r\n     * @param {object} args \r\n     * @param {*} data \r\n     */\r\n    getEndPoint(action, options, id, args, data) {\r\n        let argStr = '';\r\n        if (action == 'fetch') {\r\n            let tmpArgs = [];\r\n            for (var k in args) {\r\n                if ( args[k] !== undefined ) {\r\n                    tmpArgs.push(`${k}=${encodeURIComponent(args[k])}`);\r\n                }\r\n            }\r\n            argStr = tmpArgs.join('&');\r\n        }\r\n\r\n        let ACTIONS = {\r\n            connect: {\r\n                url: `${options.baseUrl}/api/method/login?usr=${encodeURIComponent(options.auth.usr)}&pwd=${encodeURIComponent(options.auth.pwd)}`,\r\n                method: 'get'\r\n            },\r\n            disconnect: {\r\n                url: `${options.baseUrl}/api/method/logout`,\r\n                method: 'get'\r\n            },\r\n            fetch: {\r\n                url: `${options.baseUrl}/api/resource/${encodeURIComponent(options.resource)}${id ? '/' + id : ''}${argStr ? '?' + argStr : ''}`,\r\n                method: 'get'\r\n            },\r\n            create: {\r\n                url: `${options.baseUrl}/api/resource/${encodeURIComponent(options.resource)}`,\r\n                method: 'post',\r\n                data\r\n            },\r\n            update: {\r\n                url: `${options.baseUrl}/api/resource/${encodeURIComponent(options.resource)}/${id}`,\r\n                method: 'put',\r\n                data\r\n            },\r\n            delete: {\r\n                url: `${options.baseUrl}/api/resource/${encodeURIComponent(options.resource)}/${id}`,\r\n                method: 'delete',\r\n            },\r\n            method: {\r\n                url: `${options.baseUrl}/api/method/${id}`,\r\n                method: 'get'\r\n            },\r\n            default: {\r\n                url: `${options.baseUrl}`,\r\n                method: 'get'\r\n            }\r\n\r\n        }\r\n\r\n        return action in ACTIONS ? ACTIONS[action] : ACTIONS.default;\r\n    }\r\n\r\n    /**\r\n     * Parses frappe server responses for error messages.\r\n     * @param {object} response \r\n     * @param {string} label \r\n     */\r\n    handleFrappeErrors(response, label) {\r\n        let rx = /(?:\\<pre\\>)([^<]+)(?:\\<\\/pre\\>)/ig;\r\n        let matches = rx.exec(response.data);\r\n        let remoteTrace = matches[1].trim().split(\"\\n\");\r\n        let msg = remoteTrace[remoteTrace.length - 1];\r\n        throw new RemoteError((this.options.name || 'Frappe') + (label?`[${label}]`:''), msg, remoteTrace);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {*} data \r\n     * @override\r\n     */\r\n    async isConnected(data) {\r\n        let endPoint = this.getEndPoint('method', this.options, 'frappe.auth.get_logged_user');\r\n        return this.HTTP(endPoint).then(response => {\r\n                if (response.status == 200) {\r\n                    return data;\r\n                } else {\r\n                    throw new Error(response.status);\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {(function|object)} query \r\n     * @override\r\n     */\r\n    async fetch({where, orderby, start, limit}) {\r\n\r\n        let filters,\r\n            order_by,\r\n            fields=JSON.stringify(this.fields),\r\n            builder = new ExpressionBuilder({\r\n                transform: new FrappeRestQueryAstTransform({\r\n                    r: this.meta.fields\r\n                })\r\n            }),\r\n            orderBuilder = new ExpressionBuilder({\r\n                transform: new FrappeRestQueryAstTransform({\r\n                    r: this.meta.fields\r\n                }, {\r\n                    allowArrayExpression: true,\r\n                    allowLogicalOperators: false,\r\n                    allowBinaryOperators: false,\r\n                    finalize(output) {\r\n                        return JSON.stringify(output);\r\n                    }\r\n                })\r\n            });\r\n\r\n        if ( where ) {\r\n            filters = builder.parse(where).transform();\r\n        }\r\n\r\n        if ( orderby ) {\r\n            order_by = orderBuilder.parse(orderby).transform();\r\n        }\r\n\r\n        let fetchArgs = {\r\n            fields,\r\n            filters,\r\n            order_by,\r\n            limit_start: start,\r\n            limit_page_length: limit\r\n        };\r\n        let fetchEndPoint = this.getEndPoint('fetch', this.options, null, fetchArgs);\r\n\r\n        let totalArgs = {\r\n            fields: JSON.stringify([\"count(*) as total\"]),\r\n            filters,\r\n            order_by\r\n        };\r\n        let totalEndPoint = this.getEndPoint('fetch', this.options, null, totalArgs);\r\n        return Promise.all([\r\n            this.HTTP(fetchEndPoint),\r\n            this.HTTP(totalEndPoint)])\r\n            .then(responses => {\r\n                let fetchResponse = responses[0],\r\n                    totalResponse = responses[1],\r\n                    result = {\r\n                        rows: null,\r\n                        total: 0\r\n                    };\r\n\r\n                // fetch results\r\n                if (fetchResponse.status == 200) {\r\n                    if (typeof fetchResponse.data != 'object') {\r\n                        // something went wrong, needle could not parse returned json\r\n                        throw new UnexpectedResponseError(this.name || \"Frappe\", fetchResponse.body, \"Could not parse response from service\");\r\n                    }\r\n\r\n                    result.rows = fetchResponse.data.data;\r\n                } else {\r\n                    this.handleFrappeErrors(fetchResponse, \"Error while parsing fetch row results.\");\r\n                }\r\n\r\n                // fetch query count\r\n                if (totalResponse.status == 200) {\r\n                    if (typeof totalResponse.data != 'object') {\r\n                        // something went wrong, needle could not parse returned json\r\n                        throw new UnexpectedResponseError(this.name || \"Frappe\", totalResponse.body, \"Could not parse response from service\");\r\n                    }\r\n\r\n                    result.total = totalResponse.data.data[0].total\r\n                } else {\r\n                    this.handleFrappeErrors(totalResponse, \"Error while parsing fetch total results.\");\r\n                }\r\n\r\n                return result;\r\n            });\r\n    }\r\n\r\n}\r\n\r\nexport default FrappeDoctypeModel;","import { AstTransform, unwrap, AstValue } from '../astTransforms';\r\n\r\nexport function MySQLValueFormatter(astValue) {\r\n  if (astValue.type == \"string\") {\r\n    return JSON.stringify(astValue.value);\r\n  } else if (astValue.type == \"identifier\") {\r\n    return astValue.value;\r\n  } else if (astValue.type == \"number\") {\r\n    return astValue.value;\r\n  } else if (astValue.type == \"field\" ) {\r\n    return `\\`${astValue.value}\\``;\r\n  }\r\n\r\n  return astValue.value;\r\n}\r\n\r\nexport default class MySQLAstTransform extends AstTransform {\r\n\r\n    constructor(state, opts) {\r\n      super(state, Object.assign({\r\n        formatter: MySQLValueFormatter\r\n      }, opts));\r\n    }\r\n\r\n    run(ast) {\r\n      let result = super.run(ast);\r\n\r\n      if ( typeof this.options.finalize == 'function' ) {\r\n        return this.options.finalize(result);\r\n      } else {\r\n        return result;\r\n      }\r\n    }\r\n\r\n    onLogicalExpression(op, left, right) {\r\n      let opStr = \"\"\r\n\r\n      if ( op == '&&' ) {\r\n        opStr = \"AND\";\r\n      } else if ( op == '||') {\r\n        opStr = \"OR\";\r\n      } else {\r\n        new new Error(`Unsupported operator: ${op}`)\r\n      }\r\n\r\n      let leftValue = unwrap(left).format();\r\n      let rightValue = unwrap(right).format();\r\n\r\n      return AstValue(`(${leftValue} ${opStr} ${rightValue})`, 'logicalExpression', this.options.formatter);\r\n    }\r\n\r\n    onBinaryExpression(op, left, right) {\r\n      let opStr = op;\r\n      if ( opStr == '==' ) {\r\n        opStr = '=';\r\n      }\r\n      let leftValue = unwrap(left).format();\r\n      let rightValue = unwrap(right).format();\r\n\r\n      return AstValue(`${leftValue} ${opStr} ${rightValue}`, 'binaryExpression', this.options.formatter);\r\n    }\r\n\r\n    onCallExpression(callee, args) {\r\n        let calleeName = unwrap(callee).format().toLowerCase();\r\n        let result = '';\r\n        if ( calleeName == 'like' ) {\r\n          let field = unwrap(args[0]).format();\r\n          let match = unwrap(args[1]).format();\r\n          result = `${field} LIKE ${match}`;\r\n        } else if ( calleeName == 'notLike' ) {\r\n          let field = unwrap(args[0]).format();\r\n          let match = unwrap(args[1]).format();\r\n          result = `${field} NOT LIKE ${match}`;\r\n        } else if ( calleeName == 'asc' ) {\r\n          let field = unwrap(args[0]).format();\r\n          result = `${field} ASC`;\r\n        } else if (calleeName == 'desc') {\r\n          let field = unwrap(args[0]).format();\r\n          result = `${field} DESC`;\r\n        }\r\n\r\n        result = AstValue(result, 'callExpression', this.options.formatter);\r\n        return result;\r\n    }\r\n\r\n}","import * as queryUtils from './queryUtils';\r\nimport { Schema } from './schema';\r\nimport { ModelBase } from './modelBase';\r\nimport { ModelProxy } from './modelProxy';\r\nimport ArrayModel from './models/array';\r\nimport RestModel from './models/rest';\r\nimport FrappeDoctypeModel from './models/frappeDoctype';\r\nimport * as astTransforms from './astTransforms';\r\nimport * as expressions from './expressions';\r\nimport FrappeRestQueryAstTransform from './astTransforms/frappe';\r\nimport MySQLAstTransform from './astTransforms/mysql';\r\nimport * as errors from './errors';\r\n\r\nexport function createModel(options) {\r\n    return new ModelProxy(options);\r\n}\r\n\r\nconst transforms = {\r\n    expressions,\r\n    astTransforms,\r\n    FrappeRestQueryAstTransform,\r\n    MySQLAstTransform\r\n}\r\n\r\nexport { \r\n    ModelProxy, \r\n    queryUtils, \r\n    Schema, \r\n    ModelBase, \r\n    ArrayModel, \r\n    RestModel, \r\n    FrappeDoctypeModel,\r\n    transforms,\r\n    errors\r\n};"],"names":["asc","col","a","b","desc","multiColSort","orderby","constructor","Array","fn","shift","result","length","isArrowFunction","fnSrc","toString","test","Schema","options","validate","field","value","ModelBase","EventEmitter","Object","assign","primary_key","isConnected","Promise","reject","connect","data","resolve","disconnect","fetch","query","rows","total","update","create","delete","AsyncEvent","eventName","base","args","_base","_promises","_eventName","await","promise","push","wait","emit","name","target","bind","all","then","ModelProxy","_model","model","primaryKey","recordDecorator","record","$id","beforeConnectEvent","beforeDisconnectEvent","where","limit","start","chain","catch","beforeFetchEvent","autoDisconnect","beforeUpdateEvent","beforeCreateEvent","ids","beforeDeleteEvent","ArrayModel","_data","_connected","success","undefined","i","row","matchCondition","rowFields","schema","properties","sort","slice","forEach","r","find","id","splice","lastId","TimeoutError","Error","RemoteError","service","msg","stack","remoteStack","UnexpectedResponseError","sample","MockRequestError","response","request","status","statusText","leftPadLines","lines","padding","skip","JSON","stringify","trim","split","reduce","c","v","join","capitalize","charAt","toUpperCase","normalizeField","axios","require","RestModel","cookies","fields","meta","_http","http","validateStatus","keys","normalizedField","getEndPoint","action","argStr","tmpArgs","k","encodeURIComponent","ACTIONS","url","baseUrl","method","resource","default","finalAction","debug","console","log","HTTP","endPoint","opts","defaultRequestOptions","isConnectedPromise","connectPromise","err","disconnectPromise","whereAst","orderbyAst","jsep","promises","results","errorMessage","addBinaryOp","addUnaryOp","removeBinaryOp","removeUnaryOp","ExpressionBuilder","ast","parse","expOrArrowFn","src","rx","exec","transform","run","AstTransform","state","allowBinaryExpressions","allowLogicalExpressions","allowMemberExpressions","allowCallExpressions","allowLiterals","allowIdentifier","allowArrayExpression","formatter","deafultFormatter","expFn","buildAstFnTree","unwrap","format","type","onBinaryExpression","operator","left","right","onLogicalExpression","onMemberExpression","computed","object","property","onIdentifier","onLiteral","raw","arguments","onCallExpression","callee","elements","onArrayExpression","elResolved","AstValue","op","leftValue","rightValue","argsResolved","obj","objInst","comp","objValue","objKey","prop","astValue","Symbol","toPrimitive","hint","FrappeValueFormatter","FrappeRestQueryAstTransform","finalize","calleeName","toLowerCase","match","FrappeDoctypeModel","auth","usr","pwd","handleFrappeErrors","label","matches","remoteTrace","filters","order_by","builder","orderBuilder","allowLogicalOperators","allowBinaryOperators","output","fetchArgs","limit_start","limit_page_length","fetchEndPoint","totalArgs","totalEndPoint","responses","fetchResponse","totalResponse","body","MySQLValueFormatter","MySQLAstTransform","opStr","createModel","transforms","expressions","astTransforms"],"mappings":"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"}
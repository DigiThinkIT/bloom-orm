{"version":3,"file":"freak-orm.cjs.js","sources":["../src/queryUtils.js","../src/schema.js","../src/modelBase.js","../src/models/array.js","../src/modelFacade.js","../src/main.js"],"sourcesContent":["/**\r\n * This is the default implementation of a query ascending behaviour.\r\n * Usually, custom models may replace this function generate their internal\r\n * query language.\r\n * @example\r\n * // used on a fetch query on some model.\r\n * model.fetch({ orderby: r => asc(r.id) });\r\n * @param {string} col The column to order in ascending order\r\n * @returns {function} A comparison function to use between two objects\r\n */\r\nexport function asc(col) {\r\n    return function (a, b) {\r\n        return a[col] - b[col];\r\n    }\r\n}\r\n\r\n/**\r\n * This is the default implementation of a query descending behaviour.\r\n * Usually, custom models may replace this function generate their internal\r\n * query language.\r\n * @example\r\n * // used on a fetch query on some model.\r\n * model.fetch({ orderby: r => desc(r.id) });\r\n * @param {string} col The column to order in descending order\r\n * @returns {function} A comparison function to use between two objects\r\n */\r\nexport function desc(col) {\r\n    return function (a, b) {\r\n        return b[col] - a[col];\r\n    }\r\n}\r\n\r\n/**\r\n * Helper function. It accumulates an array of asc or desc calls to implement\r\n * multi column sorting for local stores. It is usually used internally and should\r\n * not be used outside of building custom models.\r\n * @example\r\n * // multi column sorting\r\n * [\r\n *  {a: 1, b:1}, \r\n *  {a:1, b: 2}, \r\n *  {a: 2, b:1}, \r\n *  {a: 2, b: 2}\r\n * ].sort(multiColSort([asc('a'), desc('b')]))\r\n * // result:\r\n * [\r\n *  {a: 1, b: 2},\r\n *  {a: 1, b: 1},\r\n *  {a: 2, b: 2},\r\n *  {a: 2, b: 1}\r\n * ]\r\n * @param {Array} orderby An array or single asc/desc function to accumulate\r\n * @returns {function} A comparison function which combines the provided array of sort functions.\r\n */\r\nexport function multiColSort(orderby) {\r\n    if (orderby.constructor !== Array) {\r\n        orderby = [orderby];\r\n    }\r\n\r\n    let fn = orderby.shift();\r\n    return function (a, b) {\r\n        let result = fn(a, b);\r\n        if (result === 0 && orderby.length > 0) {\r\n            return multiColSort(orderby)(a, b);\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n/**\r\n * \r\n * @param {*} fn A value to test if is considered an arrow function.\r\n * @returns {boolean} true or false\r\n */\r\nexport function isArrowFunction(fn) {\r\n    let fnSrc = fn.toString();\r\n    return (/^\\s*(\\(\\s*\\)|\\([a-z0-9_=,\\s+\\{\\}\\.]+\\)|[a-z0-9_\\.]+)\\s*=>.+/).test(fnSrc);\r\n}","export class Schema {\r\n    constructor(options) {\r\n        this.options = options;\r\n    }\r\n\r\n    validate(field, value) {\r\n\r\n    }\r\n}","import { EventEmitter } from 'events';\r\n\r\n/**\r\n * Base Model abstract class. All models should implement all methods on this class.\r\n * @extends EventEmitter\r\n */\r\nexport class ModelBase extends EventEmitter{\r\n    /**\r\n     * \r\n     * @param {*} options\r\n     */\r\n    constructor(options) {\r\n        super();\r\n        this.options = options;\r\n    }\r\n\r\n    /**\r\n     * @returns true if connected.\r\n     */\r\n    get isConnected() {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Connects the model to its backend.\r\n     * @param {*} data Any object to pass along when Promise chained.\r\n     * @returns {Promise} A promise resolved once the model's backend is connected.\r\n     */\r\n    async connect(data) {\r\n        return new Promise.resolve(data);\r\n    }\r\n\r\n    /**\r\n     * Disconnects the model from its backend\r\n     * @param {*} data Any object to pass along when Promise chained.\r\n     * @returns {Promise} A promise resolved once the model's backend is disconnected.\r\n     */\r\n    async disconnect(data) {\r\n        return new Promise.resolve(data);\r\n    }\r\n\r\n    /**\r\n     * Data fetch method. Accepts either a 'where' arrow function or more complex\r\n     * object containing where, orderby, start, limit options.\r\n     * @param {*} query \r\n     */\r\n    async fetch(query) {\r\n        return new Promise.resolve({ rows: [], total: 0 });\r\n    }\r\n\r\n    /**\r\n     * Updates an array of data\r\n     * @param {Array} rows\r\n     * @returns {Promise}\r\n     */\r\n    async update(rows) {\r\n        return new Promise.resolve({ rows: [] });\r\n    }\r\n\r\n    /**\r\n     * Creates a list of records.\r\n     * @param {Array} rows \r\n     * @returns {Promise} List of records created.\r\n     */\r\n    async create(rows) {\r\n        return new Promise.resolve({ rows: [] });\r\n    }\r\n\r\n    /**\r\n     * Delete records by ids\r\n     * @param {Array} ids The records ids to delete.\r\n     * @returns {Promise}\r\n     */\r\n    async delete(rows) {\r\n        return new Promise.resolve({ rows: [] });\r\n    }\r\n\r\n}","import { asc, desc, multiColSort } from '../queryUtils';\r\nimport { ModelBase } from '../modelBase';\r\n\r\n/**\r\n * Reference model implementation based on simple object arrays\r\n * @extends ModelBase\r\n */\r\nexport class ArrayModel extends ModelBase {\r\n    constructor(options) {\r\n        super(options);\r\n        this._data = this.options.data;\r\n        this._connected = false;\r\n    }\r\n\r\n    /**\r\n     * @returns {boolean} true when connected\r\n     * @override\r\n     */\r\n    get isConnected() {\r\n        return this._connected;\r\n    }\r\n\r\n    /**\r\n     * To simulate and stay api compliant, this model implements connecting/disconnecting behaviour.\r\n     * @param {*} data \r\n     * @returns {Promise}\r\n     * @override\r\n     */\r\n    async connect(data) {\r\n        return new Promise(resolve => {\r\n            this._connected = true;\r\n            return resolve(data)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * To simulate and stay api compliant, this model implements connecting/disconnecting behaviour.\r\n     * @param {*} data \r\n     * @returns {Promise}\r\n     * @override\r\n     */\r\n    async disconnect(data) {\r\n        return new Promise(resolve => {\r\n            this._connected = false;\r\n            return resolve(data)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetches rows using where, order, start and limit query parameters\r\n     * @param {*} query An object containing a set of query definitions.\r\n     * @returns {Promise}\r\n     * @override\r\n     */\r\n    async fetch({ where, orderby, start, limit }) {\r\n        return new Promise(success => {\r\n            let result = {\r\n                rows: [],\r\n                total: 100\r\n            }\r\n\r\n            if (start === undefined) { start = 0 }\r\n            if (limit === undefined) { limit = 20 }\r\n\r\n            let count = 0;\r\n            for (let i = 0; i < this._data.length; i++) {\r\n                let row = Object.assign({}, this._data[i]);\r\n\r\n                let matchCondition = where ? where(row) : true;\r\n                if (matchCondition) {\r\n                    result.rows.push(row);\r\n                }\r\n            }\r\n\r\n            let rowFields = {\r\n                id: 'id',\r\n                value: 'value',\r\n                description: 'description',\r\n                updated: 'updated'\r\n            }\r\n\r\n            if (orderby) {\r\n                result.rows = result.rows.sort(multiColSort(orderby(rowFields, asc, desc)));\r\n            }\r\n\r\n            result.rows = result.rows.slice(start, start + limit);\r\n\r\n            return success(result);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Updates rows provided by passing an object containing a \"rows\" array property.\r\n     * @param {*} data Object containing rows in a \"rows\" property\r\n     * @returns {Promise} Returns the provided data with the rows updated.\r\n     * @override\r\n     */\r\n    async update(data) {\r\n        return new Promise(success => {\r\n            data.rows.forEach(row => {\r\n\r\n                this._data.find((r, i) => {\r\n                    if (r.id == row.id) {\r\n                        this._data[i] = row;\r\n                        return true;\r\n                    }\r\n                })\r\n\r\n            });\r\n            return success(data);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Deletes all records matching the provided ids.\r\n     * @param {Array} ids \r\n     * @returns {Promise}\r\n     * @override\r\n     */\r\n    async delete(ids) {\r\n        return new Promise(success => {\r\n            ids.forEach((id) => {\r\n                this._data.find((r, i) => {\r\n                    if (r.id == id) {\r\n                        this._data.splice(i, 1);\r\n                        return true;\r\n                    }\r\n                });\r\n            })\r\n\r\n            return success(ids);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates all the records provided. Returning the same records updated with their identifier.\r\n     * @param {Array} rows Array of records to create\r\n     * @returns {Promise}\r\n     * @override\r\n     */\r\n    async create(rows) {\r\n        return new Promise(success => {\r\n            let lastId = this._data[this._data.length - 1].id;\r\n            rows.forEach((row, i) => {\r\n                row.id = ++lastId;\r\n                this._data.push(row);\r\n            });\r\n\r\n            success({ rows });\r\n        });\r\n    }\r\n\r\n}","import { isArrowFunction } from './queryUtils';\r\nimport { ModelBase } from './modelBase';\r\n\r\n/**\r\n * A convenient event argument container that allows async processing for subscribing events.\r\n * @example\r\n * // simple event\r\n * let EventEmitter = require('event');\r\n * let emitter = new EventEmitter();\r\n * let e = new EventArgs('myevent', emitter, { a: 1});\r\n * emitter.on('myevent', e => {\r\n *   // emulate a long running promise,\r\n *   // any event that requies pausing further flow can insert a promise.\r\n *   e.await(new Promise(resolve => {\r\n *     setTimeout(resolve, 5000);\r\n *   }));\r\n * })\r\n * \r\n * // triggers events and waits until all event promises resolve\r\n * e.wait().then(() => {\r\n *  console.log(\"Called after all event promises are resolved\");\r\n * })\r\n */\r\nexport class EventArgs {\r\n\r\n    /**\r\n     * \r\n     * @param {string} eventName Event Name.\r\n     * @param {*} base EventHandler instance to trigger event in behalve of.\r\n     * @param {*} args Event arguments to pass during event trigger.\r\n     */\r\n    constructor(eventName, base, args={}) {\r\n        this._base = base;\r\n        this.args = args;\r\n        this._promises = [];\r\n        this._eventName = eventName;\r\n    }\r\n\r\n    /**\r\n     * If an event handler needs to run a long running process, this method\r\n     * allows them the insert a promise into a wait queue so implementing code\r\n     * can wait for these promises to resolve or be rejected.\r\n     * @param {Promise} promise A promise to add to our wait list\r\n     */\r\n    await(promise) {\r\n        this._promises.push(promise);\r\n    }\r\n\r\n    /**\r\n     * If event handlers added long running promisses through the await function this method can be used\r\n     * to chain more processes that should only run after these event promises have resolved.\r\n     * @param {*} data A convenient way to enable this method to be chained. \r\n     *                 Any data passed will be passed along untouched down at the end of the wait promise.\r\n     * @returns {Promise} A promise which will pass the provided data object if passed.\r\n     */\r\n    wait(data) {\r\n        this._base.emit(this._eventName, {\r\n            name: this._eventName,\r\n            target: this._base,\r\n            args: this.args,\r\n            await: this.await.bind(this)\r\n        });\r\n        return Promise.all(this._promises).then(() => data);\r\n    }\r\n}\r\n\r\n/**\r\n * A model facade class that encapsulates promise handling and connection management.\r\n * @extends ModelBase\r\n */\r\nexport class ModelFacade extends ModelBase {\r\n\r\n    /**\r\n     * \r\n     * @param {*} options Model configuration\r\n     * @param {string} options.adapter Adapter to load or instantiate.\r\n     */\r\n    constructor(options) {\r\n        super(options);\r\n\r\n        this.options = Object.assign({\r\n        }, options);\r\n\r\n        if (typeof options.model == 'string') {\r\n            this._model = new require(options.model)(options);\r\n        } else {\r\n            this._model = new options.model(options);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Connects the model to its backend.\r\n     * @param {*} data Any object to pass along when Promise chained.\r\n     * @fires beforeConnect Before connecting event.\r\n     * @fires afterConnect After connecting event.\r\n     * @returns {Promise} A promise resolved once the model's backend is connected.\r\n     */\r\n    async connect(data) {\r\n        /**\r\n         * Before connecting\r\n         * @event ModelFacade#beforeConnect\r\n         * @type {EventArgs}\r\n         */\r\n        let beforeConnectEvent = new EventArgs('beforeConnect', this, {});\r\n\r\n        /**\r\n         * After connecting\r\n         * @event ModelFacade#afterConnect\r\n         * @type {EventArgs}\r\n         */\r\n\r\n        return beforeConnectEvent.wait(data)\r\n            .then(data => this._model.connect(data))\r\n            .then(data => new EventArgs('afterConnect', this, {}).wait(data))\r\n    }\r\n\r\n    /**\r\n     * Disconnects the model from its backend\r\n     * @param {*} data Any object to pass along when Promise chained.\r\n     * @fires beforeDisconnect Before disconnecting event.\r\n     * @fires afterDisconnect After disconnecting event.\r\n     * @returns {Promise} A promise resolved once the model's backend is disconnected.\r\n     */\r\n    async disconnect(data) {\r\n        /**\r\n         * Before disconnecting\r\n         * @event ModelFacade#beforeDisconnect\r\n         * @type {EventArgs}\r\n         */\r\n        let beforeDisconnectEvent = new EventArgs('beforeDisconnect', this, {});\r\n\r\n        /**\r\n         * After disconnecting\r\n         * @event ModelFacade#aftereDisconnect\r\n         * @type {EventArgs}\r\n         */\r\n\r\n        return beforeDisconnectEvent.wait(data)\r\n            .then(data => this._model.disconnect(data))\r\n            .then(data => new EventArgs('afterDisconnect', this, {}).wait(data))\r\n    }\r\n\r\n    /**\r\n     * Data fetch method. Accepts either a 'where' arrow function or more complex\r\n     * object containing where, orderby, start, limit options.\r\n     * @param {*} query \r\n     * @fires beforeFetch Before disconnecting event.\r\n     * @fires afterFetch After disconnecting event.\r\n     * @returns {Promise}\r\n     */\r\n    async fetch(query={}) {\r\n\r\n        /** Accept an arrow function as 'where' condition */\r\n        if (isArrowFunction(query)) {\r\n            query = { where: query };\r\n        }\r\n\r\n        let chain = Promise.resolve(query);\r\n        if (!this._model.isConnected) {\r\n            chain = chain.then(query => this.connect(query))\r\n        }\r\n\r\n        /**\r\n         * Before fetch\r\n         * @event ModelFacade#beforeFetch\r\n         * @property {object} query Query object containing, where, orderby, start and limit properties.\r\n         * @property {function} query.where A where arrow function definition.\r\n         * @property {function} query.orderby A record order by definition arrow function.\r\n         * @property {int} query.start The record start index, used in pagination mostly.\r\n         * @property {int} query.limit The maximum number of records to return.\r\n         * @type {EventArgs}\r\n         */\r\n        let beforeFetchEvent = new EventArgs('beforeFetch', this, { query });\r\n\r\n        /**\r\n         * After fetch\r\n         * @event ModelFacade#afterFetch\r\n         * @property {object} result A query result object containing records fetched.\r\n         * @property {Array} result.rows Records fetched.\r\n         * @type {EventArgs}\r\n         */\r\n\r\n        chain = chain.then(query => beforeFetchEvent.wait(query))\r\n            .then(query => this._model.fetch(query))\r\n            .then(result => new EventArgs('afterFetch', this, { result }).wait(result));\r\n\r\n        if (this.options.autoDisconnect) {\r\n            chain = chain.then(this.disconnect);\r\n        }\r\n\r\n        return chain;\r\n    }\r\n\r\n    /**\r\n     * Updates an array of data\r\n     * @param {Array} rows\r\n     * @fires beforeUpdate Before disconnecting event.\r\n     * @fires afterUpdate After disconnecting event.\r\n     * @returns {Promise}\r\n     */\r\n    async update(rows) {\r\n        let chain = Promise.resolve(rows);\r\n        if (!this._model.isConnected) {\r\n            chain = chain.then(rows => this.connect(rows))\r\n        }\r\n\r\n        /**\r\n         * Before update\r\n         * @event ModelFacade#beforeUpdate\r\n         * @property { Array } rows Array of records to update.\r\n         * @type {EventArgs}\r\n         */\r\n        let beforeUpdateEvent = new EventArgs('beforeUpdate', this, { rows });\r\n\r\n        /**\r\n         * After update\r\n         * @event ModelFacade#afterUpdate\r\n         * @property { Array } rows Array of updated records.\r\n         * @type {EventArgs}\r\n         */\r\n\r\n        chain = chain.then(rows => beforeUpdateEvent.wait(rows))\r\n            .then(rows => this._model.update(rows))\r\n            .then(rows => new EventArgs('afterUpdate', this, { rows }).wait(rows))\r\n\r\n        if (this.options.autoDisconnect) {\r\n            chain = chain.then(result => this.disconnect(result));\r\n        }\r\n\r\n        return chain;\r\n    }\r\n\r\n    /**\r\n     * Creates a list of records.\r\n     * @param {Array} rows \r\n     * @fires beforeCreate Before disconnecting event.\r\n     * @fires afterCreate After disconnecting event.\r\n     * @returns {Promise} List of records created.\r\n     */\r\n    async create(rows) {\r\n        let chain = Promise.resolve(rows);\r\n        if (!this._model.isConnected) {\r\n            chain = chain.then(rows => this.connect(rows))\r\n        }\r\n\r\n        /**\r\n         * Before create\r\n         * @event ModelFacade#beforeCreate\r\n         * @property {Array} rows Array of records to create.\r\n         * @type {EventArgs}\r\n         */\r\n        let beforeCreateEvent = new EventArgs('beforeCreate', this, { rows });\r\n\r\n        /**\r\n         * After create\r\n         * @event ModelFacade#aftereCreate\r\n         * @property {Array} rows Array of created records.\r\n         * @type {EventArgs}\r\n         */\r\n\r\n        chain = chain.then(rows => beforeCreateEvent.wait(rows))\r\n            .then(rows => this._model.create(rows))\r\n            .then(rows => new EventArgs('afterCreate', this, { rows }).wait(rows));\r\n\r\n        if (this.options.autoDisconnect) {\r\n            chain = chain.then(result => this.disconnect(result));\r\n        }\r\n\r\n        return chain;\r\n    }\r\n\r\n    /**\r\n     * Delete records by ids\r\n     * @param {Array} ids The records ids to delete.\r\n     * @fires beforeDelete Before disconnecting event.\r\n     * @fires afterDelete After disconnecting event.\r\n     * @returns {Promise}\r\n     */\r\n    async delete(ids) {\r\n        let chain = Promise.resolve(ids);\r\n\r\n        if (!this._model.isConnected) {\r\n            chain = chain.then(ids => this._model.connect(ids))\r\n        }\r\n\r\n        /**\r\n         * Before delete\r\n         * @event ModelFacade#beforeDelete\r\n         * @property {Array} ids The record ids to delete.\r\n         * @type {EventArgs}\r\n         */\r\n        let beforeDeleteEvent = new EventArgs('beforeDelete', this, { ids });\r\n\r\n        /**\r\n         * After delete\r\n         * @event ModelFacade#aftereDelete\r\n         * @property {Array} ids The record ids deleted.\r\n         * @type {EventArgs}\r\n         */\r\n\r\n        chain = chain.then(ids => beforeDeleteEvent.wait(ids))\r\n            .then(ids => this._model.delete(ids))\r\n            .then(ids => new EventArgs('afterDelete', this, { ids }).wait(ids));\r\n\r\n        if (this.options.autoDisconnect) {\r\n            chain = chain.then(result => this.disconnect(result));\r\n        }\r\n\r\n        return chain;\r\n    }\r\n}","import * as queryUtils from './queryUtils';\r\nimport { Schema } from './schema';\r\nimport { ModelBase } from './modelBase';\r\nimport { ArrayModel } from './models/array';\r\nimport { ModelFacade } from './modelFacade';\r\n\r\nexport function createModel(options) {\r\n    return new ModelFacade(options);\r\n}\r\n\r\nexport { ModelFacade, queryUtils, Schema, ModelBase, ArrayModel };"],"names":["EventEmitter"],"mappings":"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"}